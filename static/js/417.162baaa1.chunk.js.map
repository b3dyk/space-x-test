{"version":3,"file":"static/js/417.162baaa1.chunk.js","mappings":";qHAAaA,EAAAC,EAAAA,MAAAA,QAAAC,EAAAD,EAAAA,MAAAA,QAEbE,EAAQ,OAAgB,EAwFxBA,EAAQ,EAhFc,WAAiB,IAAhBC,EAAMC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC7B,GAAsB,qBAAXG,OACP,MAAO,CACHC,YAAa,WAAQ,GAG7B,IAAAC,EAA2DN,EAAnDO,IAAAA,OAAG,IAAAD,EAAG,iBAAgBA,EAAAE,EAA6BR,EAA3BS,QAAAA,OAAO,IAAAD,EAAGE,aAAYF,EAyBhDG,EAAc,SAACC,EAAUC,EAAON,EAAKO,GACnCA,SACOD,EAAMN,GAGbM,EAAMN,GAAOK,EAEjBG,EAASF,EACb,EACMG,EAAW,WACb,IAAMC,EAAUR,EAAQS,QAAQX,GAChC,OAAgB,OAAZU,QAAgCd,IAAZc,EACb,CAAC,EAEW,kBAAZA,EACAE,EAAWF,GAEM,oBAAjBA,EAAQG,KACRH,EAAQG,KAAKD,GAEjB,CAAC,CACZ,EACMA,EAAa,SAACN,GAChB,QAAcV,IAAVU,EACA,MAAO,CAAC,EAEZ,IACI,OAAOQ,KAAKC,MAAMT,EACtB,CACA,MAAOU,GAEH,OADAC,QAAQC,MAAMF,GACP,CAAC,CACZ,CACJ,EACMR,EAAW,SAACF,GACd,IACqC,oBAAtBJ,EAAQiB,UACfjB,EAAQiB,UAAUnB,EAAKc,KAAKM,UAAUd,IAGtCJ,EAAQmB,QAAQrB,EAAKc,KAAKM,UAAUd,GAE5C,CACA,MAAOU,GACHC,QAAQC,MAAMF,EAClB,CACJ,EACA,MAAO,CAAElB,YAvEW,SAAHwB,GAA0C,IAApCC,EAAKD,EAALC,MAAOC,EAAIF,EAAJE,KAAMC,EAAOH,EAAPG,QAASC,EAAOJ,EAAPI,QACzC,GAAgB,QAAZD,EAAmB,CACnB,IAAMnB,EAAQG,IACY,oBAAfH,EAAMO,MACbP,EAAMO,MAAK,SAACc,GACJA,EAAEC,eAAeJ,EAAKxB,MACtB0B,EAAQC,EAAEH,EAAKxB,KAEvB,IAEAM,EAAMsB,eAAeJ,EAAKxB,MAC1B0B,EAAQpB,EAAMkB,EAAKxB,KAE3B,CACAuB,EAAK,eAAAM,EAAAtC,EAAAF,IAAAyC,MAAC,SAAAC,EAAO1B,EAAU2B,EAAGzB,GAAO,IAAAD,EAAA,OAAAjB,IAAA4C,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEH,oBADpB9B,EAAQG,KACGI,KACbP,EAAMO,MAAK,SAACc,GAAC,OAAKvB,EAAYC,EAAUsB,EAAGH,EAAKxB,IAAKO,EAAQ,IAG7DH,EAAYC,EAAUC,EAAOkB,EAAKxB,IAAKO,GAC1C,wBAAA2B,EAAAG,OAAA,GAAAN,EAAA,KACJ,gBAAAO,EAAAC,EAAAC,GAAA,OAAAX,EAAAY,MAAA,KAAA/C,UAAA,EARI,GAST,EAiDJ,oBCzFA,SAASgD,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ/C,EAAKgD,GACpE,IACE,IAAIC,EAAON,EAAI3C,GAAKgD,GAChBE,EAAQD,EAAKC,KACnB,CAAE,MAAOhC,GAEP,YADA2B,EAAO3B,EAET,CACI+B,EAAKE,KACPP,EAAQM,GAERE,QAAQR,QAAQM,GAAOrC,KAAKiC,EAAOC,EAEvC,CAiBAM,EAAO7D,QAhBP,SAA2B8D,GACzB,OAAO,WACL,IAAIC,EAAOC,KACTC,EAAO/D,UACT,OAAO,IAAI0D,SAAQ,SAAUR,EAASC,GACpC,IAAIF,EAAMW,EAAGb,MAAMc,EAAME,GACzB,SAASX,EAAMI,GACbR,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQG,EAClE,CACA,SAASH,EAAOW,GACdhB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASW,EACnE,CACAZ,OAAMlD,EACR,GACF,CACF,EACoCyD,EAAO7D,QAAQmE,YAAa,EAAMN,EAAO7D,QAAiB,QAAI6D,EAAO7D,8BC9BzG,IAAIoE,EAAU,gBACd,SAASvE,IACP,aACAgE,EAAO7D,QAAUH,EAAsB,WACrC,OAAOG,CACT,EAAG6D,EAAO7D,QAAQmE,YAAa,EAAMN,EAAO7D,QAAiB,QAAI6D,EAAO7D,QACxE,IAAIA,EAAU,CAAC,EACbqE,EAAKC,OAAOC,UACZC,EAASH,EAAGjC,eACZqC,EAAiBH,OAAOG,gBAAkB,SAAUC,EAAKlE,EAAKmE,GAC5DD,EAAIlE,GAAOmE,EAAKjB,KAClB,EACAkB,EAAU,mBAAqBC,OAASA,OAAS,CAAC,EAClDC,EAAiBF,EAAQG,UAAY,aACrCC,EAAsBJ,EAAQK,eAAiB,kBAC/CC,EAAoBN,EAAQO,aAAe,gBAC7C,SAASC,EAAOV,EAAKlE,EAAKkD,GACxB,OAAOY,OAAOG,eAAeC,EAAKlE,EAAK,CACrCkD,MAAOA,EACP2B,YAAY,EACZC,cAAc,EACdC,UAAU,IACRb,EAAIlE,EACV,CACA,IACE4E,EAAO,CAAC,EAAG,GACb,CAAE,MAAOlB,GACPkB,EAAS,SAAgBV,EAAKlE,EAAKkD,GACjC,OAAOgB,EAAIlE,GAAOkD,CACpB,CACF,CACA,SAASjB,EAAK+C,EAASC,EAAS1B,EAAM2B,GACpC,IAAIC,EAAiBF,GAAWA,EAAQlB,qBAAqBqB,EAAYH,EAAUG,EACjFC,EAAYvB,OAAOwB,OAAOH,EAAepB,WACzCwB,EAAU,IAAIC,EAAQN,GAAe,IACvC,OAAOjB,EAAeoB,EAAW,UAAW,CAC1CnC,MAAOuC,EAAiBT,EAASzB,EAAMgC,KACrCF,CACN,CACA,SAASK,EAASpC,EAAIY,EAAKlB,GACzB,IACE,MAAO,CACL2C,KAAM,SACN3C,IAAKM,EAAGsC,KAAK1B,EAAKlB,GAEtB,CAAE,MAAOU,GACP,MAAO,CACLiC,KAAM,QACN3C,IAAKU,EAET,CACF,CACAlE,EAAQyC,KAAOA,EACf,IAAI4D,EAAmB,CAAC,EACxB,SAAST,IAAa,CACtB,SAASU,IAAqB,CAC9B,SAASC,IAA8B,CACvC,IAAIC,EAAoB,CAAC,EACzBpB,EAAOoB,EAAmB1B,GAAgB,WACxC,OAAOd,IACT,IACA,IAAIyC,EAAWnC,OAAOoC,eACpBC,EAA0BF,GAAYA,EAASA,EAASG,EAAO,MACjED,GAA2BA,IAA4BtC,GAAMG,EAAO4B,KAAKO,EAAyB7B,KAAoB0B,EAAoBG,GAC1I,IAAIE,EAAKN,EAA2BhC,UAAYqB,EAAUrB,UAAYD,OAAOwB,OAAOU,GACpF,SAASM,EAAsBvC,GAC7B,CAAC,OAAQ,QAAS,UAAUwC,SAAQ,SAAUC,GAC5C5B,EAAOb,EAAWyC,GAAQ,SAAUxD,GAClC,OAAOQ,KAAKiD,QAAQD,EAAQxD,EAC9B,GACF,GACF,CACA,SAAS0D,EAAcrB,EAAWsB,GAChC,SAASC,EAAOJ,EAAQxD,EAAKJ,EAASC,GACpC,IAAIgE,EAASnB,EAASL,EAAUmB,GAASnB,EAAWrC,GACpD,GAAI,UAAY6D,EAAOlB,KAAM,CAC3B,IAAImB,EAASD,EAAO7D,IAClBE,EAAQ4D,EAAO5D,MACjB,OAAOA,GAAS,UAAYU,EAAQV,IAAUc,EAAO4B,KAAK1C,EAAO,WAAayD,EAAY/D,QAAQM,EAAM6D,SAASlG,MAAK,SAAUqC,GAC9H0D,EAAO,OAAQ1D,EAAON,EAASC,EACjC,IAAG,SAAUa,GACXkD,EAAO,QAASlD,EAAKd,EAASC,EAChC,IAAK8D,EAAY/D,QAAQM,GAAOrC,MAAK,SAAUmG,GAC7CF,EAAO5D,MAAQ8D,EAAWpE,EAAQkE,EACpC,IAAG,SAAU5F,GACX,OAAO0F,EAAO,QAAS1F,EAAO0B,EAASC,EACzC,GACF,CACAA,EAAOgE,EAAO7D,IAChB,CACA,IAAIiE,EACJhD,EAAeT,KAAM,UAAW,CAC9BN,MAAO,SAAesD,EAAQxD,GAC5B,SAASkE,IACP,OAAO,IAAIP,GAAY,SAAU/D,EAASC,GACxC+D,EAAOJ,EAAQxD,EAAKJ,EAASC,EAC/B,GACF,CACA,OAAOoE,EAAkBA,EAAkBA,EAAgBpG,KAAKqG,EAA4BA,GAA8BA,GAC5H,GAEJ,CACA,SAASzB,EAAiBT,EAASzB,EAAMgC,GACvC,IAAIjF,EAAQ,iBACZ,OAAO,SAAUkG,EAAQxD,GACvB,GAAI,cAAgB1C,EAAO,MAAM,IAAI6G,MAAM,gCAC3C,GAAI,cAAgB7G,EAAO,CACzB,GAAI,UAAYkG,EAAQ,MAAMxD,EAC9B,OAAOoE,GACT,CACA,IAAK7B,EAAQiB,OAASA,EAAQjB,EAAQvC,IAAMA,IAAO,CACjD,IAAIqE,EAAW9B,EAAQ8B,SACvB,GAAIA,EAAU,CACZ,IAAIC,EAAiBC,EAAoBF,EAAU9B,GACnD,GAAI+B,EAAgB,CAClB,GAAIA,IAAmBzB,EAAkB,SACzC,OAAOyB,CACT,CACF,CACA,GAAI,SAAW/B,EAAQiB,OAAQjB,EAAQiC,KAAOjC,EAAQkC,MAAQlC,EAAQvC,SAAS,GAAI,UAAYuC,EAAQiB,OAAQ,CAC7G,GAAI,mBAAqBlG,EAAO,MAAMA,EAAQ,YAAaiF,EAAQvC,IACnEuC,EAAQmC,kBAAkBnC,EAAQvC,IACpC,KAAO,WAAauC,EAAQiB,QAAUjB,EAAQoC,OAAO,SAAUpC,EAAQvC,KACvE1C,EAAQ,YACR,IAAIuG,EAASnB,EAASV,EAASzB,EAAMgC,GACrC,GAAI,WAAasB,EAAOlB,KAAM,CAC5B,GAAIrF,EAAQiF,EAAQpC,KAAO,YAAc,iBAAkB0D,EAAO7D,MAAQ6C,EAAkB,SAC5F,MAAO,CACL3C,MAAO2D,EAAO7D,IACdG,KAAMoC,EAAQpC,KAElB,CACA,UAAY0D,EAAOlB,OAASrF,EAAQ,YAAaiF,EAAQiB,OAAS,QAASjB,EAAQvC,IAAM6D,EAAO7D,IAClG,CACF,CACF,CACA,SAASuE,EAAoBF,EAAU9B,GACrC,IAAIqC,EAAarC,EAAQiB,OACvBA,EAASa,EAAS9C,SAASqD,GAC7B,QAAIhI,IAAc4G,EAAQ,OAAOjB,EAAQ8B,SAAW,KAAM,UAAYO,GAAcP,EAAS9C,SAAiB,SAAMgB,EAAQiB,OAAS,SAAUjB,EAAQvC,SAAMpD,EAAW2H,EAAoBF,EAAU9B,GAAU,UAAYA,EAAQiB,SAAW,WAAaoB,IAAerC,EAAQiB,OAAS,QAASjB,EAAQvC,IAAM,IAAI6E,UAAU,oCAAsCD,EAAa,aAAc/B,EAClY,IAAIgB,EAASnB,EAASc,EAAQa,EAAS9C,SAAUgB,EAAQvC,KACzD,GAAI,UAAY6D,EAAOlB,KAAM,OAAOJ,EAAQiB,OAAS,QAASjB,EAAQvC,IAAM6D,EAAO7D,IAAKuC,EAAQ8B,SAAW,KAAMxB,EACjH,IAAI5C,EAAO4D,EAAO7D,IAClB,OAAOC,EAAOA,EAAKE,MAAQoC,EAAQ8B,EAASS,YAAc7E,EAAKC,MAAOqC,EAAQnD,KAAOiF,EAASU,QAAS,WAAaxC,EAAQiB,SAAWjB,EAAQiB,OAAS,OAAQjB,EAAQvC,SAAMpD,GAAY2F,EAAQ8B,SAAW,KAAMxB,GAAoB5C,GAAQsC,EAAQiB,OAAS,QAASjB,EAAQvC,IAAM,IAAI6E,UAAU,oCAAqCtC,EAAQ8B,SAAW,KAAMxB,EACrW,CACA,SAASmC,EAAaC,GACpB,IAAIC,EAAQ,CACVC,OAAQF,EAAK,IAEf,KAAKA,IAASC,EAAME,SAAWH,EAAK,IAAK,KAAKA,IAASC,EAAMG,WAAaJ,EAAK,GAAIC,EAAMI,SAAWL,EAAK,IAAKzE,KAAK+E,WAAWC,KAAKN,EACrI,CACA,SAASO,EAAcP,GACrB,IAAIrB,EAASqB,EAAMQ,YAAc,CAAC,EAClC7B,EAAOlB,KAAO,gBAAiBkB,EAAO7D,IAAKkF,EAAMQ,WAAa7B,CAChE,CACA,SAASrB,EAAQN,GACf1B,KAAK+E,WAAa,CAAC,CACjBJ,OAAQ,SACNjD,EAAYqB,QAAQyB,EAAcxE,MAAOA,KAAKmF,OAAM,EAC1D,CACA,SAASvC,EAAOwC,GACd,GAAIA,EAAU,CACZ,IAAIC,EAAiBD,EAAStE,GAC9B,GAAIuE,EAAgB,OAAOA,EAAejD,KAAKgD,GAC/C,GAAI,mBAAqBA,EAASxG,KAAM,OAAOwG,EAC/C,IAAKE,MAAMF,EAASjJ,QAAS,CAC3B,IAAIoJ,GAAK,EACP3G,EAAO,SAASA,IACd,OAAS2G,EAAIH,EAASjJ,QAAS,GAAIqE,EAAO4B,KAAKgD,EAAUG,GAAI,OAAO3G,EAAKc,MAAQ0F,EAASG,GAAI3G,EAAKe,MAAO,EAAIf,EAC9G,OAAOA,EAAKc,WAAQtD,EAAWwC,EAAKe,MAAO,EAAIf,CACjD,EACF,OAAOA,EAAKA,KAAOA,CACrB,CACF,CACA,MAAO,CACLA,KAAMgF,EAEV,CACA,SAASA,IACP,MAAO,CACLlE,WAAOtD,EACPuD,MAAM,EAEV,CACA,OAAO2C,EAAkB/B,UAAYgC,EAA4B9B,EAAeoC,EAAI,cAAe,CACjGnD,MAAO6C,EACPjB,cAAc,IACZb,EAAe8B,EAA4B,cAAe,CAC5D7C,MAAO4C,EACPhB,cAAc,IACZgB,EAAkBkD,YAAcpE,EAAOmB,EAA4BrB,EAAmB,qBAAsBlF,EAAQyJ,oBAAsB,SAAUC,GACtJ,IAAIC,EAAO,mBAAqBD,GAAUA,EAAOE,YACjD,QAASD,IAASA,IAASrD,GAAqB,uBAAyBqD,EAAKH,aAAeG,EAAKE,MACpG,EAAG7J,EAAQsC,KAAO,SAAUoH,GAC1B,OAAOpF,OAAOwF,eAAiBxF,OAAOwF,eAAeJ,EAAQnD,IAA+BmD,EAAOK,UAAYxD,EAA4BnB,EAAOsE,EAAQxE,EAAmB,sBAAuBwE,EAAOnF,UAAYD,OAAOwB,OAAOe,GAAK6C,CAC5O,EAAG1J,EAAQgK,MAAQ,SAAUxG,GAC3B,MAAO,CACL+D,QAAS/D,EAEb,EAAGsD,EAAsBI,EAAc3C,WAAYa,EAAO8B,EAAc3C,UAAWS,GAAqB,WACtG,OAAOhB,IACT,IAAIhE,EAAQkH,cAAgBA,EAAelH,EAAQiK,MAAQ,SAAUzE,EAASC,EAAS1B,EAAM2B,EAAayB,QACxG,IAAWA,IAAgBA,EAAcvD,SACzC,IAAIsG,EAAO,IAAIhD,EAAczE,EAAK+C,EAASC,EAAS1B,EAAM2B,GAAcyB,GACxE,OAAOnH,EAAQyJ,oBAAoBhE,GAAWyE,EAAOA,EAAKtH,OAAOvB,MAAK,SAAUiG,GAC9E,OAAOA,EAAO3D,KAAO2D,EAAO5D,MAAQwG,EAAKtH,MAC3C,GACF,EAAGkE,EAAsBD,GAAKzB,EAAOyB,EAAI3B,EAAmB,aAAcE,EAAOyB,EAAI/B,GAAgB,WACnG,OAAOd,IACT,IAAIoB,EAAOyB,EAAI,YAAY,WACzB,MAAO,oBACT,IAAI7G,EAAQmK,KAAO,SAAUC,GAC3B,IAAIC,EAAS/F,OAAO8F,GAClBD,EAAO,GACT,IAAK,IAAI3J,KAAO6J,EAAQF,EAAKnB,KAAKxI,GAClC,OAAO2J,EAAKG,UAAW,SAAS1H,IAC9B,KAAOuH,EAAKhK,QAAS,CACnB,IAAIK,EAAM2J,EAAKI,MACf,GAAI/J,KAAO6J,EAAQ,OAAOzH,EAAKc,MAAQlD,EAAKoC,EAAKe,MAAO,EAAIf,CAC9D,CACA,OAAOA,EAAKe,MAAO,EAAIf,CACzB,CACF,EAAG5C,EAAQ4G,OAASA,EAAQZ,EAAQzB,UAAY,CAC9CqF,YAAa5D,EACbmD,MAAO,SAAeqB,GACpB,GAAIxG,KAAKrB,KAAO,EAAGqB,KAAKpB,KAAO,EAAGoB,KAAKgE,KAAOhE,KAAKiE,WAAQ7H,EAAW4D,KAAKL,MAAO,EAAIK,KAAK6D,SAAW,KAAM7D,KAAKgD,OAAS,OAAQhD,KAAKR,SAAMpD,EAAW4D,KAAK+E,WAAWhC,QAAQkC,IAAiBuB,EAAe,IAAK,IAAIX,KAAQ7F,KAAM,MAAQ6F,EAAKY,OAAO,IAAMjG,EAAO4B,KAAKpC,KAAM6F,KAAUP,OAAOO,EAAKa,MAAM,MAAQ1G,KAAK6F,QAAQzJ,EACtU,EACAyC,KAAM,WACJmB,KAAKL,MAAO,EACZ,IAAIgH,EAAa3G,KAAK+E,WAAW,GAAGG,WACpC,GAAI,UAAYyB,EAAWxE,KAAM,MAAMwE,EAAWnH,IAClD,OAAOQ,KAAK4G,IACd,EACA1C,kBAAmB,SAA2B2C,GAC5C,GAAI7G,KAAKL,KAAM,MAAMkH,EACrB,IAAI9E,EAAU/B,KACd,SAAS8G,EAAOC,EAAKC,GACnB,OAAO3D,EAAOlB,KAAO,QAASkB,EAAO7D,IAAMqH,EAAW9E,EAAQnD,KAAOmI,EAAKC,IAAWjF,EAAQiB,OAAS,OAAQjB,EAAQvC,SAAMpD,KAAc4K,CAC5I,CACA,IAAK,IAAIzB,EAAIvF,KAAK+E,WAAW5I,OAAS,EAAGoJ,GAAK,IAAKA,EAAG,CACpD,IAAIb,EAAQ1E,KAAK+E,WAAWQ,GAC1BlC,EAASqB,EAAMQ,WACjB,GAAI,SAAWR,EAAMC,OAAQ,OAAOmC,EAAO,OAC3C,GAAIpC,EAAMC,QAAU3E,KAAKrB,KAAM,CAC7B,IAAIsI,EAAWzG,EAAO4B,KAAKsC,EAAO,YAChCwC,EAAa1G,EAAO4B,KAAKsC,EAAO,cAClC,GAAIuC,GAAYC,EAAY,CAC1B,GAAIlH,KAAKrB,KAAO+F,EAAME,SAAU,OAAOkC,EAAOpC,EAAME,UAAU,GAC9D,GAAI5E,KAAKrB,KAAO+F,EAAMG,WAAY,OAAOiC,EAAOpC,EAAMG,WACxD,MAAO,GAAIoC,GACT,GAAIjH,KAAKrB,KAAO+F,EAAME,SAAU,OAAOkC,EAAOpC,EAAME,UAAU,OACzD,CACL,IAAKsC,EAAY,MAAM,IAAIvD,MAAM,0CACjC,GAAI3D,KAAKrB,KAAO+F,EAAMG,WAAY,OAAOiC,EAAOpC,EAAMG,WACxD,CACF,CACF,CACF,EACAV,OAAQ,SAAgBhC,EAAM3C,GAC5B,IAAK,IAAI+F,EAAIvF,KAAK+E,WAAW5I,OAAS,EAAGoJ,GAAK,IAAKA,EAAG,CACpD,IAAIb,EAAQ1E,KAAK+E,WAAWQ,GAC5B,GAAIb,EAAMC,QAAU3E,KAAKrB,MAAQ6B,EAAO4B,KAAKsC,EAAO,eAAiB1E,KAAKrB,KAAO+F,EAAMG,WAAY,CACjG,IAAIsC,EAAezC,EACnB,KACF,CACF,CACAyC,IAAiB,UAAYhF,GAAQ,aAAeA,IAASgF,EAAaxC,QAAUnF,GAAOA,GAAO2H,EAAatC,aAAesC,EAAe,MAC7I,IAAI9D,EAAS8D,EAAeA,EAAajC,WAAa,CAAC,EACvD,OAAO7B,EAAOlB,KAAOA,EAAMkB,EAAO7D,IAAMA,EAAK2H,GAAgBnH,KAAKgD,OAAS,OAAQhD,KAAKpB,KAAOuI,EAAatC,WAAYxC,GAAoBrC,KAAKoH,SAAS/D,EAC5J,EACA+D,SAAU,SAAkB/D,EAAQyB,GAClC,GAAI,UAAYzB,EAAOlB,KAAM,MAAMkB,EAAO7D,IAC1C,MAAO,UAAY6D,EAAOlB,MAAQ,aAAekB,EAAOlB,KAAOnC,KAAKpB,KAAOyE,EAAO7D,IAAM,WAAa6D,EAAOlB,MAAQnC,KAAK4G,KAAO5G,KAAKR,IAAM6D,EAAO7D,IAAKQ,KAAKgD,OAAS,SAAUhD,KAAKpB,KAAO,OAAS,WAAayE,EAAOlB,MAAQ2C,IAAa9E,KAAKpB,KAAOkG,GAAWzC,CACtQ,EACAgF,OAAQ,SAAgBxC,GACtB,IAAK,IAAIU,EAAIvF,KAAK+E,WAAW5I,OAAS,EAAGoJ,GAAK,IAAKA,EAAG,CACpD,IAAIb,EAAQ1E,KAAK+E,WAAWQ,GAC5B,GAAIb,EAAMG,aAAeA,EAAY,OAAO7E,KAAKoH,SAAS1C,EAAMQ,WAAYR,EAAMI,UAAWG,EAAcP,GAAQrC,CACrH,CACF,EACA,MAAS,SAAgBsC,GACvB,IAAK,IAAIY,EAAIvF,KAAK+E,WAAW5I,OAAS,EAAGoJ,GAAK,IAAKA,EAAG,CACpD,IAAIb,EAAQ1E,KAAK+E,WAAWQ,GAC5B,GAAIb,EAAMC,SAAWA,EAAQ,CAC3B,IAAItB,EAASqB,EAAMQ,WACnB,GAAI,UAAY7B,EAAOlB,KAAM,CAC3B,IAAImF,EAASjE,EAAO7D,IACpByF,EAAcP,EAChB,CACA,OAAO4C,CACT,CACF,CACA,MAAM,IAAI3D,MAAM,wBAClB,EACA4D,cAAe,SAAuBnC,EAAUd,EAAYC,GAC1D,OAAOvE,KAAK6D,SAAW,CACrB9C,SAAU6B,EAAOwC,GACjBd,WAAYA,EACZC,QAASA,GACR,SAAWvE,KAAKgD,SAAWhD,KAAKR,SAAMpD,GAAYiG,CACvD,GACCrG,CACL,CACA6D,EAAO7D,QAAUH,EAAqBgE,EAAO7D,QAAQmE,YAAa,EAAMN,EAAO7D,QAAiB,QAAI6D,EAAO7D,0BC/S3G,SAASoE,EAAQM,GAGf,OAAQb,EAAO7D,QAAUoE,EAAU,mBAAqBS,QAAU,iBAAmBA,OAAOE,SAAW,SAAUL,GAC/G,cAAcA,CAChB,EAAI,SAAUA,GACZ,OAAOA,GAAO,mBAAqBG,QAAUH,EAAIkF,cAAgB/E,QAAUH,IAAQG,OAAON,UAAY,gBAAkBG,CAC1H,EAAGb,EAAO7D,QAAQmE,YAAa,EAAMN,EAAO7D,QAAiB,QAAI6D,EAAO7D,QAAUoE,EAAQM,EAC5F,CACAb,EAAO7D,QAAUoE,EAASP,EAAO7D,QAAQmE,YAAa,EAAMN,EAAO7D,QAAiB,QAAI6D,EAAO7D,kICJ3FwL,GAA6B,EAmBpBC,EANIC,EAAa,sBAMuC,SACnEC,EACAC,EACAC,GAMA,IAAMnI,EAAQkI,IAGZE,UACCN,GAGD9H,IAAUkI,MAEVJ,GAA6B,EAE7BM,SAAUC,EAAAA,GAAAA,MACR,yEAkBE,IAAAC,EAAwBN,EAAAA,SAAe,CAACO,KAAM,CAACvI,MAAKA,EAAEkI,YAAWA,KAA/DK,EAAID,EAAA,GAAAC,KAAGC,EAAWF,EAAA,GAiD1B,OA5CIG,EAAAA,GAKFT,EAAAA,iBAAsB,WACpBpH,OAAO8H,OAAOH,EAAM,CAAEvI,MAAKA,EAAEkI,YAAWA,IAKpCS,EAAuBJ,IAEzBC,EAAY,CAACD,KAAIA,GAErB,GAAG,CAACN,EAAWjI,EAAOkI,IAEtBtH,OAAO8H,OAAOH,EAAM,CAAEvI,MAAKA,EAAEkI,YAAWA,IAG1CF,EAAAA,WAAgB,WASd,OANIW,EAAuBJ,IAEzBC,EAAY,CAACD,KAAIA,IAIZN,GAAU,WAQXU,EAAuBJ,IAEzBC,EAAY,CAACD,KAAIA,GAErB,GACF,GAAG,CAACN,IAEGjI,CACT,EAEA,SAAS2I,EAAiCL,OACxCtI,EAAKsI,EAAAtI,MACLkI,EAAWI,EAAAJ,YAKX,IACE,OAAOlI,IAAUkI,IACjB,MAAAU,GACA,OAAO,EAEX,KCtHYC,qDAAZ,SAAYA,GACVA,EAAAA,EAAA,iBACAA,EAAAA,EAAA,uBACAA,EAAAA,EAAA,8BACD,CAJD,CAAYA,IAAAA,EAAY,KAYxB,IAAMC,EAAQ,IAAIC,IAEZ,SAAUC,EAAcvG,GAC5B,IAAI0D,EACJ,OAAQ1D,GACN,KAAKoG,EAAaI,MAChB9C,EAAO,QACP,MACF,KAAK0C,EAAaK,SAChB/C,EAAO,WACP,MACF,KAAK0C,EAAaM,aAChBhD,EAAO,eAGX,OAAOA,CACT,CAwFE,SAAMiD,EAA2BC,EAAE5G,GACnC,IAAM6G,EAtFF,SAAiBD,GACrB,IAGIE,EAAW9G,EAHT+G,EAASV,EAAMW,IAAIJ,GACzB,GAAIG,EAAQ,OAAOA,EAInBpB,SACEC,EAAAA,EAAAA,MAAUgB,KAAeA,EACzBK,KAAA,eAAeC,OAAQN,EAAA,8CAAvB,gHAGAhB,EAAAA,EAAAA,MAAAgB,KAAAA,EAAAK,KAAA,IAOF,IALA,IAAME,EAA8B,GAC9BC,EAA4B,GAC5BC,EAA8B,GAC9BC,EAAkC,GAExBC,EAAA,EAAA1B,EAAAe,EAASY,YAATD,EAAA1B,EAAA7L,OAAAuN,IAAsB,CAAjC,IAAME,EAAC5B,EAAA0B,GACV,GAAe,uBAAXE,EAAER,MAKN,GAAe,wBAAXQ,EAAER,KACJ,OAAQQ,EAAEZ,WACR,IAAK,QACHO,EAAQvE,KAAK4E,GACb,MACF,IAAK,WACHJ,EAAUxE,KAAK4E,GACf,MACF,IAAK,eACHH,EAAczE,KAAK4E,SAbvBN,EAAUtE,KAAK4E,GAmBnB9B,SACEC,EAAAA,EAAAA,KAAWuB,EAAMnN,QACdoN,EAAQpN,QAAUqN,EAAUrN,QAAUsN,EAActN,OACvD,0HAEA4L,EAAAA,EAAAA,KAAAuB,EAAAnN,QAEFoN,EACEpN,QAAQqN,EAASrN,QAAgBsN,EAAGtN,OAAoB,aAEtD4L,EAAAA,EAAAA,IAAGwB,EAAQpN,OAAAqN,EAAerN,OAAOsN,EAAAtN,QAAa,8EAC9C,GAAAkN,OAAAN,EAAA,SAAqBM,OAAAE,EAAgBpN,OAAA,cAAckN,OAAAI,EAAAtN,OAAA,KACnD,qBAAAkN,OAAAG,EAAArN,OAAA,gBAGA,0EAA+D4L,EAAAA,EAAAA,IAAAwB,EAAApN,OAAAqN,EAAArN,OAAAsN,EAAAtN,QAAA,MACnEgG,EAAKoH,EAAQpN,OAAWoM,EAAUI,MAAMJ,EAAAK,SAAEW,EAAOpN,QAAaqN,EAAArN,SAExDgG,EAAAoG,EAAcM,kBAClBc,EAASJ,EAAApN,OACPoN,EAAAC,EACArN,OACAqN,EAGFC,WAEE1B,EAAAA,EAAAA,IAAqB,IAAlB4B,EAAkBxN,OAAA,sDAAgBkN,OAAAN,EAAA,SACrC,GAAAM,OAAAM,EAAAxN,OAAA,kBAGE,0EAAuD4L,EAAAA,EAAAA,IAAA,IAAA4B,EAAAxN,OAAA,IAC7D,IAAA0N,EAAYF,EAAW,GAEvBV,EAAIY,EAAmBC,qBAAoB,GAO3C,IAAAC,EAAU,CAAAlE,KANRgE,EAAOhE,MAAsB,SAAXgE,EAAWhE,KAAAuD,KAC9BS,EAAAhE,KAAAnG,MAEA,OAG2ByC,KAACA,EAAA8G,UAAAA,GAE9B,OADCT,EAAAwB,IAAOjB,EAAQgB,GAChBA,CAED,CAEQE,CAAAlB,GACAmB,EAAoBxB,EAAcvG,GACxCgI,EACgBzB,EACdM,EAAA7G,eACE4F,EAAAA,EAAAA,IAAGiB,EAAA7G,OAAqBA,EAAA,aAAWkH,OAAAa,EAAiB,wBAEzD,GAAAb,OAAAa,EAAA,YAAAb,OAAAc,EAAA,wBAAApC,EAAAA,EAAAA,IAAAiB,EAAA7G,OAAAA,EAAA,qCCjGG/D,EAEAkC,OAAMC,UAAAnC,eAEJ,SAAUgM,EAIdC,EACAC,GAEA,YAFA,IAAAA,IAAAA,EAA+ChK,OAAOwB,OAAO,OAQzD,SACJyI,EACAF,GAEA,IAAMG,GAAWC,EAAAA,EAAAA,UAEdD,EAASE,SACVH,IAAWC,EAASE,QAAQH,QAC5BF,IAAUG,EAASE,QAAQL,QAE3BG,EAASE,QAAU,IAAIC,EAAcJ,EAAQF,EAAOG,EAASE,UAE/D,IAAM5N,EAAQ0N,EAASE,QAQjB1C,GAAmB4C,EAAAA,EAAAA,UAAS,GAApBC,GAAF7C,EAAA,GAASA,EAAA,IAKrB,OAJAlL,EAAMoL,YAAc,WAClB2C,GAAQ,SAAAC,GAAQ,OAAAA,EAAO,CAAP,GAClB,EAEOhO,CACT,CAhCSiO,CC1CH,SACJC,GAEA,IAAMjJ,GAAUkJ,EAAAA,EAAAA,aAAWC,EAAAA,EAAAA,MACrBX,EAASS,GAAYjJ,EAAQwI,OAQnC,OAPAzC,SACEC,EAAAA,EAAAA,MACAwC,EAAA,uKAGAxC,EAAAA,EAAAA,MAAAwC,EAAA,IAEKA,CACT,CD8BIY,CAAgBb,EAAQC,QACxBF,GACAD,SAASE,EACb,CA8BA,IAAAK,EAAA,WACE,SAAAA,EACkBJ,EACAF,EAChBe,GAFgB,KAAAb,OAAAA,EACA,KAAAF,MAAAA,EAqCV,KAAAgB,gBAAkB,IAAIC,IAItB,KAAAC,oBAAsB,IAAKC,EAAAA,GAAgBC,QAAUH,KAqPrD,KAAAI,mBAAoBC,EAAAA,EAAAA,GAAgB,CAC1CC,SAAS,EACTC,UAAM,EACNnO,WAAO,EACPoO,cAAeC,EAAAA,EAAAA,UAGT,KAAAC,mBAAoBL,EAAAA,EAAAA,GAAgB,CAC1CC,SAAS,EACTC,UAAM,EACNnO,WAAO,EACPoO,cAAeC,EAAAA,EAAAA,QA0KT,KAAAE,mBAAqB,IAAKC,EAAAA,GAAgBC,QAAU1D,KAhd1DK,EAAmBuB,EAAO9B,EAAaI,OAIvC,IAAMyD,EAAiBhB,GAAYA,EAAS9H,OACtC+I,EAAeD,GAAkBA,EAAeP,KAClDQ,IACFrM,KAAKqM,aAAeA,EAExB,CA6fF,OA3fE1B,EAAApK,UAAA2H,YAAA,WAEEJ,SAAUC,EAAAA,GAAAA,KAAK,oEACjB,EAEA4C,EAAApK,UAAA+L,YAAA,SAAYC,GAAZ,IAAAC,EAAA,KACE,OAAO,IAAI5M,SAAwC,SAACR,EAASC,GAC3D,IAAMoN,EAAoBD,EAAKC,kBAS/BD,EAAKnB,gBAAgBqB,IAAItN,GACzBoN,EAAKjB,oBAAoBmB,IAAID,GAC7BF,EAAOI,iBAAiB,SATF,SAAhBC,IACJJ,EAAKnB,gBAAgBwB,OAAOzN,GAC5BoN,EAAKjB,oBAAoBsB,OAAOJ,GAChCF,EAAOO,oBAAoB,QAASF,GACpCvN,EAAOkN,EAAOQ,OAChB,IAKAP,EAAKtE,aACP,GACF,EAaAyC,EAAApK,UAAA6J,SAAA,SAASE,GAAT,IAAAkC,EAAA,KAQExM,KAAKgN,gBAAiB/B,EAAAA,EAAAA,aAAWC,EAAAA,EAAAA,MAAoB8B,eAErDhN,KAAKiN,WAAW3C,GAEhB,IAAM4C,EAAWlN,KAAKmN,qBAEhB7J,EAASmE,GACb2F,EAAAA,EAAAA,cAAY,WACV,GAAIZ,EAAKQ,eACP,OAAO,WAAO,EAGhB,IAAMK,EAAS,WACb,IAAMjB,EAAiBI,EAAKlJ,OAItBA,EAAS4J,EAASI,mBAGtBlB,GACAA,EAAeR,UAAYtI,EAAOsI,SAClCQ,EAAeN,gBAAkBxI,EAAOwI,gBACxCyB,EAAAA,EAAAA,GAAMnB,EAAeP,KAAMvI,EAAOuI,OAKpCW,EAAKgB,UAAUlK,EACjB,EAuCImK,EAAeP,EAASvF,UAAU0F,GArCtB,SAAVK,EAAWhQ,GACf,IAAMiQ,EAAOT,EAAe,KAC5BO,EAAaG,cAQb,IACEV,EAASW,mBACTJ,EAAeP,EAASvF,UAAU0F,EAAQK,GAC1C,QACAR,EAAe,KAAIS,EAGrB,IAAKvP,EAAegE,KAAK1E,EAAO,iBAE9B,MAAMA,EAGR,IAAM0O,EAAiBI,EAAKlJ,SAEzB8I,GACAA,GAAkBA,EAAeR,WACjC2B,EAAAA,EAAAA,GAAM7P,EAAO0O,EAAe1O,SAE7B8O,EAAKgB,UAAU,CACb3B,KAAOO,GAAkBA,EAAeP,KACxCnO,MAAOA,EACPkO,SAAS,EACTE,cAAeC,EAAAA,EAAAA,OAGrB,IAIA,OAAO,WAAM,OAAA0B,EAAaG,aAAb,CACf,GAAG,CAODV,EACAlN,KAAKgN,eACLhN,KAAKuK,OAAOuD,yBAGd,WAAM,OAAAtB,EAAKc,kBAAL,IACN,WAAM,OAAAd,EAAKc,kBAAL,IAIRtN,KAAK+N,2BAA2BzK,GAEhC,IAAM0K,EAAchO,KAAKiO,cAAc3K,GAOvC,OALK0K,EAAYpC,SAAW5L,KAAKqL,gBAAgB6C,OAC/ClO,KAAKqL,gBAAgBtI,SAAQ,SAAA3D,GAAW,OAAAA,EAAQ4O,EAAR,IACxChO,KAAKqL,gBAAgB8C,SAGhBH,CACT,EAUQrD,EAAApK,UAAA0M,WAAR,SACE3C,SAEMmC,EAAoBzM,KAAKoO,wBAC7BpO,KAAKqO,iBAAmB/D,GAMpBgE,EAA2BtO,KAAKyM,mBASpCzM,KAAKuL,oBAAoBgD,IAAID,KAC5Bf,EAAAA,EAAAA,GAAMd,EAAmB6B,KAE1BtO,KAAKyM,kBAAoBA,EAErB6B,GAA4BtO,KAAKwO,aAMnCxO,KAAKuL,oBAAoBsB,OAAOyB,GAUhCtO,KAAKwO,WAAWC,UAAUzO,KAAK0O,sBAK/B1O,KAAKqM,cAA0B,QAAXrE,EAAAhI,KAAKsD,cAAM,IAAA0E,OAAA,EAAAA,EAAE6D,OAAQ7L,KAAKqM,aAC9CrM,KAAKsD,YAAS,IAUlBtD,KAAK2O,YAAcrE,EAAQqE,aAAehE,EAAcpK,UAAUoO,YAClE3O,KAAK0N,QAAUpD,EAAQoD,SAAW/C,EAAcpK,UAAUmN,SAGvD1N,KAAKgN,iBAAkBhN,KAAKuK,OAAOuD,wBACN,IAA9B9N,KAAKqO,iBAAiBO,KACrB5O,KAAKqO,iBAAiBQ,KAMvB7O,KAAKqO,iBAAiBQ,MACiB,YAAvC7O,KAAKyM,kBAAkBqC,YAYvB9O,KAAKsD,OAAStD,KAAKgM,kBAEnBhM,KAAKsD,SAAWtD,KAAK0L,mBACrB1L,KAAKsD,SAAWtD,KAAKgM,oBAErBhM,KAAKsD,YAAS,GApBdtD,KAAKsD,OAAStD,KAAK0L,iBAsBvB,EAEQf,EAAApK,UAAAmO,mBAAR,WACE,IAAMK,EAEF,GAEEC,EAAiBhP,KAAKuK,OAAO0E,eAAeC,WAsBlD,OArBIF,GAAgBD,EAAQ/J,KAAKgK,GAE7BhP,KAAKqO,iBAAiBY,gBACxBF,EAAQ/J,KAAKhF,KAAKqO,iBAAiBY,gBAarCF,EAAQ/J,MAAKmK,EAAAA,EAAAA,GACXnP,KAAKwO,YAAcxO,KAAKwO,WAAWlE,QACnCtK,KAAKyM,oBAGAsC,EAAQK,OACbC,EAAAA,EAEJ,EAiBQ1E,EAAApK,UAAA6N,wBAAR,SAAgCpG,cAAA,IAAAA,IAAAA,EAAA,IAC9B,IAAA6G,EAAI7G,EAAA6G,KAQDS,GAPAtH,EAAA4G,IACQ5G,EAAA2G,YACJ3G,EAAA0F,QACO1F,EAAAiH,gBAICM,EAAAA,EAAAA,IAAAvH,EATe,0DAaxByE,EACJnM,OAAO8H,OAAOkH,EAAc,CAAEjF,MAAOrK,KAAKqK,QAkB5C,IAfErK,KAAKgN,gBAE+B,iBAAlCP,EAAkBqC,aACgB,sBAAlCrC,EAAkBqC,cAKpBrC,EAAkBqC,YAAc,eAG7BrC,EAAkBxD,YACrBwD,EAAkBxD,UAAY,CAAC,GAG7B4F,EAAM,CAEN,IAAAW,EAEE/C,EAAiBqC,YAFnBA,OAAW,IAAAU,EAAGxP,KAAKyP,wBAAuBD,EAC1CE,EACEjD,EAAiBkD,mBADnBA,OAAkB,IAAAD,EAAGZ,EAAWY,EAMlCpP,OAAO8H,OAAOqE,EAAmB,CAC/BkD,mBAAkBA,EAClBb,YAAa,iBAELrC,EAAkBqC,cAC5BrC,EAAkBqC,aACD,QAAfxG,EAAAtI,KAAKwO,kBAAU,IAAAlG,OAAA,EAAAA,EAAEgC,QAAQqF,qBACzB3P,KAAKyP,yBAGT,OAAOhD,CACT,EAEA9B,EAAApK,UAAAkP,sBAAA,mBACE,OACsC,QAApCzH,EAAAhI,KAAKqO,iBAAiBY,sBAAc,IAAAjH,OAAA,EAAAA,EAAE8G,eACD,QAArCxG,EAAAtI,KAAKuK,OAAO0E,eAAeC,kBAAU,IAAA5G,OAAA,EAAAA,EAAEwG,cACvC,aAEJ,EAKQnE,EAAApK,UAAAoO,YAAR,SAAoB9C,GAAc,EAC1BlB,EAAApK,UAAAmN,QAAR,SAAgBhQ,GAAqB,EAQ7BiN,EAAApK,UAAA4M,mBAAR,WAIE,IAAMD,EAAWlN,KAAKwO,WACpBxO,KAAKgN,gBACAhN,KAAKgN,eAAe4C,iBAAiB5P,KAAKyM,oBAC1CzM,KAAKwO,YACLxO,KAAKuK,OAAO2E,WAAWlP,KAAK0O,sBAEnC1O,KAAK6P,gBAAiBC,EAAAA,EAAAA,UAAQ,WAAM,MAAC,CACnCC,QAAS7C,EAAS6C,QAAQC,KAAK9C,GAC/BuB,UAAWvB,EAASuB,UAAUuB,KAAK9C,GACnC+C,UAAW/C,EAAS+C,UAAUD,KAAK9C,GACnCgD,YAAahD,EAASgD,YAAYF,KAAK9C,GACvCiD,aAAcjD,EAASiD,aAAaH,KAAK9C,GACzCkD,YAAalD,EAASkD,YAAYJ,KAAK9C,GACvCmD,gBAAiBnD,EAASmD,gBAAgBL,KAAK9C,GAPb,GAQhC,CAACA,IAEL,IAAMoD,KAC0B,IAA9BtQ,KAAKqO,iBAAiBO,KACtB5O,KAAKqO,iBAAiBQ,MAYxB,OATI7O,KAAKgN,gBAAkBsD,IACzBtQ,KAAKgN,eAAeuD,sBAAsBrD,GAEtCA,EAASI,mBAAmB1B,SAE9B5L,KAAKgN,eAAewD,0BAA0BtD,IAI3CA,CACT,EAOQvC,EAAApK,UAAAiN,UAAR,SAAkBiD,GAChB,IAAMrE,EAAiBpM,KAAKsD,OACxB8I,GAAkBA,EAAeP,OACnC7L,KAAKqM,aAAeD,EAAeP,MAErC7L,KAAKsD,OAASmN,EAGdzQ,KAAKkI,cACLlI,KAAK0Q,uBAAuBD,EAC9B,EAEQ9F,EAAApK,UAAAmQ,uBAAR,SAA+BpN,GAA/B,IAAAkJ,EAAA,KACE,IAAKlJ,EAAOsI,QAAS,CACnB,IAAM+E,EAAQ3Q,KAAK4Q,cAActN,GAGjC1D,QAAQR,UAAU/B,MAAK,WACjBsT,EACFnE,EAAKkB,QAAQiD,GACJrN,EAAOuI,MAChBW,EAAKmC,YAAYrL,EAAOuI,KAE5B,IAAGgF,OAAM,SAAAnT,GACPoK,SAAUC,EAAAA,GAAAA,KAAYrK,EACxB,IAEJ,EAEQiN,EAAApK,UAAAqQ,cAAR,SAAsBtN,GACpB,OAAOwN,EAAAA,EAAAA,GAAgBxN,EAAOyN,QAC1B,IAAIC,EAAAA,EAAY,CAAEC,cAAe3N,EAAOyN,SACxCzN,EAAO5F,KACb,EAEQiN,EAAApK,UAAA+M,iBAAR,WASE,OALKtN,KAAKsD,QACRtD,KAAK0Q,uBACH1Q,KAAKsD,OAAStD,KAAKwO,WAAWlB,oBAG3BtN,KAAKsD,MACd,EAUAqH,EAAApK,UAAA0N,cAAA,SACE3K,GAEA,IAAI0K,EAAchO,KAAKiM,mBAAmB9C,IAAI7F,GAC9C,GAAI0K,EAAa,OAAOA,EAEhB,IAAAnC,EAA2CvI,EAAMuI,KAA/BqF,GAAyB5N,EAAM6N,SAAX5B,EAAAA,EAAAA,IAAKjM,EAA7C,qBAoBN,OAnBAtD,KAAKiM,mBAAmBjC,IAAI1G,EAAQ0K,GAAWoD,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,IAAA,CAC7CvF,KAAIA,GACDqF,GACAlR,KAAK6P,gBAAc,CACtBtF,OAAQvK,KAAKuK,OACbiE,WAAYxO,KAAKwO,WACjBvF,UAAWjJ,KAAKwO,WAAWvF,UAC3BoI,QAASrR,KAAKqO,iBAAiBQ,KAC/BxC,aAAcrM,KAAKqM,iBAGhB2B,EAAYtQ,QAASoT,EAAAA,EAAAA,GAAgBxN,EAAOyN,UAK/C/C,EAAYtQ,MAAQ,IAAIsT,EAAAA,EAAY,CAAEC,cAAe3N,EAAOyN,UAGvD/C,CACT,EAEQrD,EAAApK,UAAAwN,2BAAR,SAAmCzK,IAO/BA,EAAO6N,UACPnR,KAAKqO,iBAAiBiD,gBACrBhO,EAAOsI,SACNtI,EAAOuI,MAA4C,IAApCvL,OAAO6F,KAAK7C,EAAOuI,MAAM1P,QACF,eAAxC6D,KAAKwO,WAAWlE,QAAQwE,cAExBxO,OAAO8H,OAAO9E,EAAQ,CACpBsI,SAAS,EACTE,cAAeC,EAAAA,EAAAA,UAEjB/L,KAAKwO,WAAWuB,UAEpB,EACFpF,CAAA,CA5gBA","sources":["../node_modules/recoil-persist/dist/index.js","../node_modules/@babel/runtime/helpers/asyncToGenerator.js","../node_modules/@babel/runtime/helpers/regeneratorRuntime.js","../node_modules/@babel/runtime/helpers/typeof.js","../node_modules/@apollo/src/react/hooks/useSyncExternalStore.ts","../node_modules/@apollo/src/react/parser/index.ts","../node_modules/@apollo/src/react/hooks/useQuery.ts","../node_modules/@apollo/src/react/hooks/useApolloClient.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.recoilPersist = void 0;\n/**\n * Recoil module to persist state to storage\n *\n * @param config Optional configuration object\n * @param config.key Used as key in local storage, defaults to `recoil-persist`\n * @param config.storage Local storage to use, defaults to `localStorage`\n */\nconst recoilPersist = (config = {}) => {\n    if (typeof window === 'undefined') {\n        return {\n            persistAtom: () => { },\n        };\n    }\n    const { key = 'recoil-persist', storage = localStorage } = config;\n    const persistAtom = ({ onSet, node, trigger, setSelf }) => {\n        if (trigger === 'get') {\n            const state = getState();\n            if (typeof state.then === 'function') {\n                state.then((s) => {\n                    if (s.hasOwnProperty(node.key)) {\n                        setSelf(s[node.key]);\n                    }\n                });\n            }\n            if (state.hasOwnProperty(node.key)) {\n                setSelf(state[node.key]);\n            }\n        }\n        onSet(async (newValue, _, isReset) => {\n            const state = getState();\n            if (typeof state.then === 'function') {\n                state.then((s) => updateState(newValue, s, node.key, isReset));\n            }\n            else {\n                updateState(newValue, state, node.key, isReset);\n            }\n        });\n    };\n    const updateState = (newValue, state, key, isReset) => {\n        if (isReset) {\n            delete state[key];\n        }\n        else {\n            state[key] = newValue;\n        }\n        setState(state);\n    };\n    const getState = () => {\n        const toParse = storage.getItem(key);\n        if (toParse === null || toParse === undefined) {\n            return {};\n        }\n        if (typeof toParse === 'string') {\n            return parseState(toParse);\n        }\n        if (typeof toParse.then === 'function') {\n            return toParse.then(parseState);\n        }\n        return {};\n    };\n    const parseState = (state) => {\n        if (state === undefined) {\n            return {};\n        }\n        try {\n            return JSON.parse(state);\n        }\n        catch (e) {\n            console.error(e);\n            return {};\n        }\n    };\n    const setState = (state) => {\n        try {\n            if (typeof storage.mergeItem === 'function') {\n                storage.mergeItem(key, JSON.stringify(state));\n            }\n            else {\n                storage.setItem(key, JSON.stringify(state));\n            }\n        }\n        catch (e) {\n            console.error(e);\n        }\n    };\n    return { persistAtom };\n};\nexports.recoilPersist = recoilPersist;\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}\nmodule.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction _regeneratorRuntime() {\n  \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */\n  module.exports = _regeneratorRuntime = function _regeneratorRuntime() {\n    return exports;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  var exports = {},\n    Op = Object.prototype,\n    hasOwn = Op.hasOwnProperty,\n    defineProperty = Object.defineProperty || function (obj, key, desc) {\n      obj[key] = desc.value;\n    },\n    $Symbol = \"function\" == typeof Symbol ? Symbol : {},\n    iteratorSymbol = $Symbol.iterator || \"@@iterator\",\n    asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\",\n    toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n  function define(obj, key, value) {\n    return Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }), obj[key];\n  }\n  try {\n    define({}, \"\");\n  } catch (err) {\n    define = function define(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,\n      generator = Object.create(protoGenerator.prototype),\n      context = new Context(tryLocsList || []);\n    return defineProperty(generator, \"_invoke\", {\n      value: makeInvokeMethod(innerFn, self, context)\n    }), generator;\n  }\n  function tryCatch(fn, obj, arg) {\n    try {\n      return {\n        type: \"normal\",\n        arg: fn.call(obj, arg)\n      };\n    } catch (err) {\n      return {\n        type: \"throw\",\n        arg: err\n      };\n    }\n  }\n  exports.wrap = wrap;\n  var ContinueSentinel = {};\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n  var getProto = Object.getPrototypeOf,\n    NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function (method) {\n      define(prototype, method, function (arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (\"throw\" !== record.type) {\n        var result = record.arg,\n          value = result.value;\n        return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) {\n          invoke(\"next\", value, resolve, reject);\n        }, function (err) {\n          invoke(\"throw\", err, resolve, reject);\n        }) : PromiseImpl.resolve(value).then(function (unwrapped) {\n          result.value = unwrapped, resolve(result);\n        }, function (error) {\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n      reject(record.arg);\n    }\n    var previousPromise;\n    defineProperty(this, \"_invoke\", {\n      value: function value(method, arg) {\n        function callInvokeWithMethodAndArg() {\n          return new PromiseImpl(function (resolve, reject) {\n            invoke(method, arg, resolve, reject);\n          });\n        }\n        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n      }\n    });\n  }\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = \"suspendedStart\";\n    return function (method, arg) {\n      if (\"executing\" === state) throw new Error(\"Generator is already running\");\n      if (\"completed\" === state) {\n        if (\"throw\" === method) throw arg;\n        return doneResult();\n      }\n      for (context.method = method, context.arg = arg;;) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n        if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) {\n          if (\"suspendedStart\" === state) throw state = \"completed\", context.arg;\n          context.dispatchException(context.arg);\n        } else \"return\" === context.method && context.abrupt(\"return\", context.arg);\n        state = \"executing\";\n        var record = tryCatch(innerFn, self, context);\n        if (\"normal\" === record.type) {\n          if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue;\n          return {\n            value: record.arg,\n            done: context.done\n          };\n        }\n        \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg);\n      }\n    };\n  }\n  function maybeInvokeDelegate(delegate, context) {\n    var methodName = context.method,\n      method = delegate.iterator[methodName];\n    if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel;\n    var record = tryCatch(method, delegate.iterator, context.arg);\n    if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel;\n    var info = record.arg;\n    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel);\n  }\n  function pushTryEntry(locs) {\n    var entry = {\n      tryLoc: locs[0]\n    };\n    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);\n  }\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\", delete record.arg, entry.completion = record;\n  }\n  function Context(tryLocsList) {\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);\n  }\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) return iteratorMethod.call(iterable);\n      if (\"function\" == typeof iterable.next) return iterable;\n      if (!isNaN(iterable.length)) {\n        var i = -1,\n          next = function next() {\n            for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;\n            return next.value = undefined, next.done = !0, next;\n          };\n        return next.next = next;\n      }\n    }\n    return {\n      next: doneResult\n    };\n  }\n  function doneResult() {\n    return {\n      value: undefined,\n      done: !0\n    };\n  }\n  return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", {\n    value: GeneratorFunctionPrototype,\n    configurable: !0\n  }), defineProperty(GeneratorFunctionPrototype, \"constructor\", {\n    value: GeneratorFunction,\n    configurable: !0\n  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) {\n    var ctor = \"function\" == typeof genFun && genFun.constructor;\n    return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name));\n  }, exports.mark = function (genFun) {\n    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun;\n  }, exports.awrap = function (arg) {\n    return {\n      __await: arg\n    };\n  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    void 0 === PromiseImpl && (PromiseImpl = Promise);\n    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {\n      return result.done ? result.value : iter.next();\n    });\n  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () {\n    return this;\n  }), define(Gp, \"toString\", function () {\n    return \"[object Generator]\";\n  }), exports.keys = function (val) {\n    var object = Object(val),\n      keys = [];\n    for (var key in object) keys.push(key);\n    return keys.reverse(), function next() {\n      for (; keys.length;) {\n        var key = keys.pop();\n        if (key in object) return next.value = key, next.done = !1, next;\n      }\n      return next.done = !0, next;\n    };\n  }, exports.values = values, Context.prototype = {\n    constructor: Context,\n    reset: function reset(skipTempReset) {\n      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);\n    },\n    stop: function stop() {\n      this.done = !0;\n      var rootRecord = this.tryEntries[0].completion;\n      if (\"throw\" === rootRecord.type) throw rootRecord.arg;\n      return this.rval;\n    },\n    dispatchException: function dispatchException(exception) {\n      if (this.done) throw exception;\n      var context = this;\n      function handle(loc, caught) {\n        return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught;\n      }\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i],\n          record = entry.completion;\n        if (\"root\" === entry.tryLoc) return handle(\"end\");\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\"),\n            hasFinally = hasOwn.call(entry, \"finallyLoc\");\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n          } else {\n            if (!hasFinally) throw new Error(\"try statement without catch or finally\");\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n      finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);\n      var record = finallyEntry ? finallyEntry.completion : {};\n      return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);\n    },\n    complete: function complete(record, afterLoc) {\n      if (\"throw\" === record.type) throw record.arg;\n      return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;\n    },\n    finish: function finish(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;\n      }\n    },\n    \"catch\": function _catch(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (\"throw\" === record.type) {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function delegateYield(iterable, resultName, nextLoc) {\n      return this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel;\n    }\n  }, exports;\n}\nmodule.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return (module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports), _typeof(obj);\n}\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","import { invariant } from '../../utilities/globals';\nimport * as React from 'react';\n\nimport { canUseLayoutEffect } from '../../utilities';\n\nlet didWarnUncachedGetSnapshot = false;\n\ntype RealUseSESHookType =\n  // This import depends only on the @types/use-sync-external-store package, not\n  // the actual use-sync-external-store package, which is not installed. It\n  // might be nice to get this type from React 18, but it still needs to work\n  // when only React 17 or earlier is installed.\n  typeof import(\"use-sync-external-store\").useSyncExternalStore;\n\n// Prevent webpack from complaining about our feature detection of the\n// useSyncExternalStore property of the React namespace, which is expected not\n// to exist when using React 17 and earlier, and that's fine.\nconst uSESKey = \"useSyncExternalStore\" as keyof typeof React;\nconst realHook = React[uSESKey] as RealUseSESHookType | undefined;\n\n// Adapted from https://www.npmjs.com/package/use-sync-external-store, with\n// Apollo Client deviations called out by \"// DEVIATION ...\" comments.\n\n// When/if React.useSyncExternalStore is defined, delegate fully to it.\nexport const useSyncExternalStore: RealUseSESHookType = realHook || ((\n  subscribe,\n  getSnapshot,\n  getServerSnapshot,\n) => {\n  // Read the current snapshot from the store on every render. Again, this\n  // breaks the rules of React, and only works here because of specific\n  // implementation details, most importantly that updates are\n  // always synchronous.\n  const value = getSnapshot();\n  if (\n    // DEVIATION: Using our own __DEV__ polyfill (from ../../utilities/globals).\n    __DEV__ &&\n    !didWarnUncachedGetSnapshot &&\n    // DEVIATION: Not using Object.is because we know our snapshots will never\n    // be exotic primitive values like NaN, which is !== itself.\n    value !== getSnapshot()\n  ) {\n    didWarnUncachedGetSnapshot = true;\n    // DEVIATION: Using invariant.error instead of console.error directly.\n    invariant.error(\n      'The result of getSnapshot should be cached to avoid an infinite loop',\n    );\n  }\n\n  // Because updates are synchronous, we don't queue them. Instead we force a\n  // re-render whenever the subscribed state changes by updating an some\n  // arbitrary useState hook. Then, during render, we call getSnapshot to read\n  // the current value.\n  //\n  // Because we don't actually use the state returned by the useState hook, we\n  // can save a bit of memory by storing other stuff in that slot.\n  //\n  // To implement the early bailout, we need to track some things on a mutable\n  // object. Usually, we would put that in a useRef hook, but we can stash it in\n  // our useState hook instead.\n  //\n  // To force a re-render, we call forceUpdate({inst}). That works because the\n  // new object always fails an equality check.\n  const [{inst}, forceUpdate] = React.useState({inst: {value, getSnapshot}});\n\n  // Track the latest getSnapshot function with a ref. This needs to be updated\n  // in the layout phase so we can access it during the tearing check that\n  // happens on subscribe.\n  if (canUseLayoutEffect) {\n    // DEVIATION: We avoid calling useLayoutEffect when !canUseLayoutEffect,\n    // which may seem like a conditional hook, but this code ends up behaving\n    // unconditionally (one way or the other) because canUseLayoutEffect is\n    // constant.\n    React.useLayoutEffect(() => {\n      Object.assign(inst, { value, getSnapshot });\n      // Whenever getSnapshot or subscribe changes, we need to check in the\n      // commit phase if there was an interleaved mutation. In concurrent mode\n      // this can happen all the time, but even in synchronous mode, an earlier\n      // effect may have mutated the store.\n      if (checkIfSnapshotChanged(inst)) {\n        // Force a re-render.\n        forceUpdate({inst});\n      }\n    }, [subscribe, value, getSnapshot]);\n  } else {\n    Object.assign(inst, { value, getSnapshot });\n  }\n\n  React.useEffect(() => {\n    // Check for changes right before subscribing. Subsequent changes will be\n    // detected in the subscription handler.\n    if (checkIfSnapshotChanged(inst)) {\n      // Force a re-render.\n      forceUpdate({inst});\n    }\n\n    // Subscribe to the store and return a clean-up function.\n    return subscribe(function handleStoreChange() {\n      // TODO: Because there is no cross-renderer API for batching updates, it's\n      // up to the consumer of this library to wrap their subscription event\n      // with unstable_batchedUpdates. Should we try to detect when this isn't\n      // the case and print a warning in development?\n\n      // The store changed. Check if the snapshot changed since the last time we\n      // read from the store.\n      if (checkIfSnapshotChanged(inst)) {\n        // Force a re-render.\n        forceUpdate({inst});\n      }\n    });\n  }, [subscribe]);\n\n  return value;\n});\n\nfunction checkIfSnapshotChanged<Snapshot>({\n  value,\n  getSnapshot,\n}: {\n  value: Snapshot;\n  getSnapshot: () => Snapshot;\n}): boolean {\n  try {\n    return value !== getSnapshot();\n  } catch {\n    return true;\n  }\n}\n","import { invariant } from '../../utilities/globals';\n\nimport {\n  DocumentNode,\n  DefinitionNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode\n} from 'graphql';\n\nexport enum DocumentType {\n  Query,\n  Mutation,\n  Subscription\n}\n\nexport interface IDocumentDefinition {\n  type: DocumentType;\n  name: string;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\nconst cache = new Map();\n\nexport function operationName(type: DocumentType) {\n  let name;\n  switch (type) {\n    case DocumentType.Query:\n      name = 'Query';\n      break;\n    case DocumentType.Mutation:\n      name = 'Mutation';\n      break;\n    case DocumentType.Subscription:\n      name = 'Subscription';\n      break;\n  }\n  return name;\n}\n\n// This parser is mostly used to safety check incoming documents.\nexport function parser(document: DocumentNode): IDocumentDefinition {\n  const cached = cache.get(document);\n  if (cached) return cached;\n\n  let variables, type, name;\n\n  invariant(\n    !!document && !!document.kind,\n    `Argument of ${document} passed to parser was not a valid GraphQL ` +\n      `DocumentNode. You may need to use 'graphql-tag' or another method ` +\n      `to convert your operation into a document`\n  );\n\n  const fragments: DefinitionNode[] = []\n  const queries: DefinitionNode[] = []\n  const mutations: DefinitionNode[] = []\n  const subscriptions: DefinitionNode[] = []\n\n  for (const x of document.definitions) {\n    if (x.kind === 'FragmentDefinition') {\n      fragments.push(x);\n      continue\n    }\n\n    if (x.kind === 'OperationDefinition') {\n      switch (x.operation) {\n        case 'query':\n          queries.push(x);\n          break;\n        case 'mutation':\n          mutations.push(x);\n          break;\n        case 'subscription':\n          subscriptions.push(x);\n          break;\n      }\n    }\n  }\n\n  invariant(\n    !fragments.length ||\n      (queries.length || mutations.length || subscriptions.length),\n    `Passing only a fragment to 'graphql' is not yet supported. ` +\n      `You must include a query, subscription or mutation as well`\n  );\n\n  invariant(\n    queries.length + mutations.length + subscriptions.length <= 1,\n    `react-apollo only supports a query, subscription, or a mutation per HOC. ` +\n      `${document} had ${queries.length} queries, ${subscriptions.length} ` +\n      `subscriptions and ${mutations.length} mutations. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n\n  const definitions = queries.length\n    ? queries\n    : mutations.length\n    ? mutations\n    : subscriptions;\n\n  invariant(\n    definitions.length === 1,\n    `react-apollo only supports one definition per HOC. ${document} had ` +\n      `${definitions.length} definitions. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  const definition = definitions[0] as OperationDefinitionNode;\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data'; // fallback to using data if no name\n  }\n\n  const payload = { name, type, variables };\n  cache.set(document, payload);\n  return payload;\n}\n\nexport function verifyDocumentType(document: DocumentNode, type: DocumentType) {\n  const operation = parser(document);\n  const requiredOperationName = operationName(type);\n  const usedOperationName = operationName(operation.type);\n  invariant(\n    operation.type === type,\n    `Running a ${requiredOperationName} requires a graphql ` +\n      `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n  );\n}\n\n","import { invariant } from '../../utilities/globals';\n\nimport {\n  useCallback,\n  useContext,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { useSyncExternalStore } from './useSyncExternalStore';\nimport { equal } from '@wry/equality';\n\nimport { mergeOptions, OperationVariables, WatchQueryFetchPolicy } from '../../core';\nimport { ApolloContextValue, getApolloContext } from '../context';\nimport { ApolloError } from '../../errors';\nimport {\n  ApolloClient,\n  ApolloQueryResult,\n  NetworkStatus,\n  ObservableQuery,\n  DocumentNode,\n  TypedDocumentNode,\n  WatchQueryOptions,\n} from '../../core';\nimport {\n  QueryHookOptions,\n  QueryResult,\n  ObservableQueryFields,\n} from '../types/types';\n\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport { useApolloClient } from './useApolloClient';\nimport { canUseWeakMap, canUseWeakSet, compact, isNonEmptyArray, maybeDeepFreeze } from '../../utilities';\n\nconst {\n  prototype: {\n    hasOwnProperty,\n  },\n} = Object;\n\nexport function useQuery<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: QueryHookOptions<TData, TVariables> = Object.create(null),\n): QueryResult<TData, TVariables> {\n  return useInternalState(\n    useApolloClient(options.client),\n    query,\n  ).useQuery(options);\n}\n\nexport function useInternalState<TData, TVariables extends OperationVariables>(\n  client: ApolloClient<any>,\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n): InternalState<TData, TVariables> {\n  const stateRef = useRef<InternalState<TData, TVariables>>();\n  if (\n    !stateRef.current ||\n    client !== stateRef.current.client ||\n    query !== stateRef.current.query\n  ) {\n    stateRef.current = new InternalState(client, query, stateRef.current);\n  }\n  const state = stateRef.current;\n\n  // By default, InternalState.prototype.forceUpdate is an empty function, but\n  // we replace it here (before anyone has had a chance to see this state yet)\n  // with a function that unconditionally forces an update, using the latest\n  // setTick function. Updating this state by calling state.forceUpdate is the\n  // only way we trigger React component updates (no other useState calls within\n  // the InternalState class).\n  const [_tick, setTick] = useState(0);\n  state.forceUpdate = () => {\n    setTick(tick => tick + 1);\n  };\n\n  return state;\n}\n\nclass InternalState<TData, TVariables extends OperationVariables> {\n  constructor(\n    public readonly client: ReturnType<typeof useApolloClient>,\n    public readonly query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n    previous?: InternalState<TData, TVariables>,\n  ) {\n    verifyDocumentType(query, DocumentType.Query);\n\n    // Reuse previousData from previous InternalState (if any) to provide\n    // continuity of previousData even if/when the query or client changes.\n    const previousResult = previous && previous.result;\n    const previousData = previousResult && previousResult.data;\n    if (previousData) {\n      this.previousData = previousData;\n    }\n  }\n\n  forceUpdate() {\n    // Replaced (in useInternalState) with a method that triggers an update.\n    invariant.warn(\"Calling default no-op implementation of InternalState#forceUpdate\");\n  }\n\n  asyncUpdate(signal: AbortSignal) {\n    return new Promise<QueryResult<TData, TVariables>>((resolve, reject) => {\n      const watchQueryOptions = this.watchQueryOptions;\n\n      const handleAborted = () => {\n        this.asyncResolveFns.delete(resolve)\n        this.optionsToIgnoreOnce.delete(watchQueryOptions);\n        signal.removeEventListener('abort', handleAborted)\n        reject(signal.reason);\n      };\n\n      this.asyncResolveFns.add(resolve);\n      this.optionsToIgnoreOnce.add(watchQueryOptions);\n      signal.addEventListener('abort', handleAborted)\n      this.forceUpdate();\n    });\n  }\n\n  private asyncResolveFns = new Set<\n    (result: QueryResult<TData, TVariables>) => void\n  >();\n\n  private optionsToIgnoreOnce = new (canUseWeakSet ? WeakSet : Set)<\n    WatchQueryOptions<TVariables, TData>\n  >();\n\n  // Methods beginning with use- should be called according to the standard\n  // rules of React hooks: only at the top level of the calling function, and\n  // without any dynamic conditional logic.\n  useQuery(options: QueryHookOptions<TData, TVariables>) {\n    // The renderPromises field gets initialized here in the useQuery method, at\n    // the beginning of everything (for a given component rendering, at least),\n    // so we can safely use this.renderPromises in other/later InternalState\n    // methods without worrying it might be uninitialized. Even after\n    // initialization, this.renderPromises is usually undefined (unless SSR is\n    // happening), but that's fine as long as it has been initialized that way,\n    // rather than left uninitialized.\n    this.renderPromises = useContext(getApolloContext()).renderPromises;\n\n    this.useOptions(options);\n\n    const obsQuery = this.useObservableQuery();\n\n    const result = useSyncExternalStore(\n      useCallback(() => {\n        if (this.renderPromises) {\n          return () => {};\n        }\n\n        const onNext = () => {\n          const previousResult = this.result;\n          // We use `getCurrentResult()` instead of the onNext argument because\n          // the values differ slightly. Specifically, loading results will have\n          // an empty object for data instead of `undefined` for some reason.\n          const result = obsQuery.getCurrentResult();\n          // Make sure we're not attempting to re-render similar results\n          if (\n            previousResult &&\n            previousResult.loading === result.loading &&\n            previousResult.networkStatus === result.networkStatus &&\n            equal(previousResult.data, result.data)\n          ) {\n            return;\n          }\n\n          this.setResult(result);\n        };\n\n        const onError = (error: Error) => {\n          const last = obsQuery[\"last\"];\n          subscription.unsubscribe();\n          // Unfortunately, if `lastError` is set in the current\n          // `observableQuery` when the subscription is re-created,\n          // the subscription will immediately receive the error, which will\n          // cause it to terminate again. To avoid this, we first clear\n          // the last error/result from the `observableQuery` before re-starting\n          // the subscription, and restore it afterwards (so the subscription\n          // has a chance to stay open).\n          try {\n            obsQuery.resetLastResults();\n            subscription = obsQuery.subscribe(onNext, onError);\n          } finally {\n            obsQuery[\"last\"] = last;\n          }\n\n          if (!hasOwnProperty.call(error, 'graphQLErrors')) {\n            // The error is not a GraphQL error\n            throw error;\n          }\n\n          const previousResult = this.result;\n          if (\n            !previousResult ||\n            (previousResult && previousResult.loading) ||\n            !equal(error, previousResult.error)\n          ) {\n            this.setResult({\n              data: (previousResult && previousResult.data) as TData,\n              error: error as ApolloError,\n              loading: false,\n              networkStatus: NetworkStatus.error,\n            });\n          }\n        };\n\n        let subscription = obsQuery.subscribe(onNext, onError);\n\n        return () => subscription.unsubscribe();\n      }, [\n        // We memoize the subscribe function using useCallback and the following\n        // dependency keys, because the subscribe function reference is all that\n        // useSyncExternalStore uses internally as a dependency key for the\n        // useEffect ultimately responsible for the subscription, so we are\n        // effectively passing this dependency array to that useEffect buried\n        // inside useSyncExternalStore, as desired.\n        obsQuery,\n        this.renderPromises,\n        this.client.disableNetworkFetches,\n      ]),\n\n      () => this.getCurrentResult(),\n      () => this.getCurrentResult(),\n    );\n\n    // TODO Remove this method when we remove support for options.partialRefetch.\n    this.unsafeHandlePartialRefetch(result);\n\n    const queryResult = this.toQueryResult(result);\n\n    if (!queryResult.loading && this.asyncResolveFns.size) {\n      this.asyncResolveFns.forEach(resolve => resolve(queryResult));\n      this.asyncResolveFns.clear();\n    }\n\n    return queryResult;\n  }\n\n  // These members (except for renderPromises) are all populated by the\n  // useOptions method, which is called unconditionally at the beginning of the\n  // useQuery method, so we can safely use these members in other/later methods\n  // without worrying they might be uninitialized.\n  private renderPromises: ApolloContextValue[\"renderPromises\"];\n  private queryHookOptions: QueryHookOptions<TData, TVariables>;\n  private watchQueryOptions: WatchQueryOptions<TVariables, TData>;\n\n  private useOptions(\n    options: QueryHookOptions<TData, TVariables>,\n  ) {\n    const watchQueryOptions = this.createWatchQueryOptions(\n      this.queryHookOptions = options,\n    );\n\n    // Update this.watchQueryOptions, but only when they have changed, which\n    // allows us to depend on the referential stability of\n    // this.watchQueryOptions elsewhere.\n    const currentWatchQueryOptions = this.watchQueryOptions;\n\n    // To force this equality test to \"fail,\" thereby reliably triggering\n    // observable.reobserve, add any current WatchQueryOptions object(s) you\n    // want to be ignored to this.optionsToIgnoreOnce. A similar effect could be\n    // achieved by nullifying this.watchQueryOptions so the equality test\n    // immediately fails because currentWatchQueryOptions is null, but this way\n    // we can promise a truthy this.watchQueryOptions at all times.\n    if (\n      this.optionsToIgnoreOnce.has(currentWatchQueryOptions) ||\n      !equal(watchQueryOptions, currentWatchQueryOptions)\n    ) {\n      this.watchQueryOptions = watchQueryOptions;\n\n      if (currentWatchQueryOptions && this.observable) {\n        // As advertised in the -Once of this.optionsToIgnoreOnce, this trick is\n        // only good for one forced execution of observable.reobserve per\n        // ignored WatchQueryOptions object, though it is unlikely we will ever\n        // see this exact currentWatchQueryOptions object again here, since we\n        // just replaced this.watchQueryOptions with watchQueryOptions.\n        this.optionsToIgnoreOnce.delete(currentWatchQueryOptions);\n\n        // Though it might be tempting to postpone this reobserve call to the\n        // useEffect block, we need getCurrentResult to return an appropriate\n        // loading:true result synchronously (later within the same call to\n        // useQuery). Since we already have this.observable here (not true for\n        // the very first call to useQuery), we are not initiating any new\n        // subscriptions, though it does feel less than ideal that reobserve\n        // (potentially) kicks off a network request (for example, when the\n        // variables have changed), which is technically a side-effect.\n        this.observable.reobserve(this.getObsQueryOptions());\n\n        // Make sure getCurrentResult returns a fresh ApolloQueryResult<TData>,\n        // but save the current data as this.previousData, just like setResult\n        // usually does.\n        this.previousData = this.result?.data || this.previousData;\n        this.result = void 0;\n      }\n    }\n\n    // Make sure state.onCompleted and state.onError always reflect the latest\n    // options.onCompleted and options.onError callbacks provided to useQuery,\n    // since those functions are often recreated every time useQuery is called.\n    // Like the forceUpdate method, the versions of these methods inherited from\n    // InternalState.prototype are empty no-ops, but we can override them on the\n    // base state object (without modifying the prototype).\n    this.onCompleted = options.onCompleted || InternalState.prototype.onCompleted;\n    this.onError = options.onError || InternalState.prototype.onError;\n\n    if (\n      (this.renderPromises || this.client.disableNetworkFetches) &&\n      this.queryHookOptions.ssr === false &&\n      !this.queryHookOptions.skip\n    ) {\n      // If SSR has been explicitly disabled, and this function has been called\n      // on the server side, return the default loading state.\n      this.result = this.ssrDisabledResult;\n    } else if (\n      this.queryHookOptions.skip ||\n      this.watchQueryOptions.fetchPolicy === 'standby'\n    ) {\n      // When skipping a query (ie. we're not querying for data but still want to\n      // render children), make sure the `data` is cleared out and `loading` is\n      // set to `false` (since we aren't loading anything).\n      //\n      // NOTE: We no longer think this is the correct behavior. Skipping should\n      // not automatically set `data` to `undefined`, but instead leave the\n      // previous data in place. In other words, skipping should not mandate that\n      // previously received data is all of a sudden removed. Unfortunately,\n      // changing this is breaking, so we'll have to wait until Apollo Client 4.0\n      // to address this.\n      this.result = this.skipStandbyResult;\n    } else if (\n      this.result === this.ssrDisabledResult ||\n      this.result === this.skipStandbyResult\n    ) {\n      this.result = void 0;\n    }\n  }\n\n  private getObsQueryOptions(): WatchQueryOptions<TVariables, TData> {\n    const toMerge: Array<\n      Partial<WatchQueryOptions<TVariables, TData>>\n    > = [];\n\n    const globalDefaults = this.client.defaultOptions.watchQuery;\n    if (globalDefaults) toMerge.push(globalDefaults);\n\n    if (this.queryHookOptions.defaultOptions) {\n      toMerge.push(this.queryHookOptions.defaultOptions);\n    }\n\n    // We use compact rather than mergeOptions for this part of the merge,\n    // because we want watchQueryOptions.variables (if defined) to replace\n    // this.observable.options.variables whole. This replacement allows\n    // removing variables by removing them from the variables input to\n    // useQuery. If the variables were always merged together (rather than\n    // replaced), there would be no way to remove existing variables.\n    // However, the variables from options.defaultOptions and globalDefaults\n    // (if provided) should be merged, to ensure individual defaulted\n    // variables always have values, if not otherwise defined in\n    // observable.options or watchQueryOptions.\n    toMerge.push(compact(\n      this.observable && this.observable.options,\n      this.watchQueryOptions,\n    ));\n\n    return toMerge.reduce(\n      mergeOptions\n    ) as WatchQueryOptions<TVariables, TData>;\n  }\n\n  private ssrDisabledResult = maybeDeepFreeze({\n    loading: true,\n    data: void 0 as unknown as TData,\n    error: void 0,\n    networkStatus: NetworkStatus.loading,\n  });\n\n  private skipStandbyResult = maybeDeepFreeze({\n    loading: false,\n    data: void 0 as unknown as TData,\n    error: void 0,\n    networkStatus: NetworkStatus.ready,\n  });\n\n  // A function to massage options before passing them to ObservableQuery.\n  private createWatchQueryOptions({\n    skip,\n    ssr,\n    onCompleted,\n    onError,\n    defaultOptions,\n    // The above options are useQuery-specific, so this ...otherOptions spread\n    // makes otherOptions almost a WatchQueryOptions object, except for the\n    // query property that we add below.\n    ...otherOptions\n  }: QueryHookOptions<TData, TVariables> = {}): WatchQueryOptions<TVariables, TData> {\n    // This Object.assign is safe because otherOptions is a fresh ...rest object\n    // that did not exist until just now, so modifications are still allowed.\n    const watchQueryOptions: WatchQueryOptions<TVariables, TData> =\n      Object.assign(otherOptions, { query: this.query });\n\n    if (\n      this.renderPromises &&\n      (\n        watchQueryOptions.fetchPolicy === 'network-only' ||\n        watchQueryOptions.fetchPolicy === 'cache-and-network'\n      )\n    ) {\n      // this behavior was added to react-apollo without explanation in this PR\n      // https://github.com/apollographql/react-apollo/pull/1579\n      watchQueryOptions.fetchPolicy = 'cache-first';\n    }\n\n    if (!watchQueryOptions.variables) {\n      watchQueryOptions.variables = {} as TVariables;\n    }\n\n    if (skip) {\n      const {\n        fetchPolicy = this.getDefaultFetchPolicy(),\n        initialFetchPolicy = fetchPolicy,\n      } = watchQueryOptions;\n\n      // When skipping, we set watchQueryOptions.fetchPolicy initially to\n      // \"standby\", but we also need/want to preserve the initial non-standby\n      // fetchPolicy that would have been used if not skipping.\n      Object.assign(watchQueryOptions, {\n        initialFetchPolicy,\n        fetchPolicy: 'standby',\n      });\n    } else if (!watchQueryOptions.fetchPolicy) {\n      watchQueryOptions.fetchPolicy =\n        this.observable?.options.initialFetchPolicy ||\n        this.getDefaultFetchPolicy();\n    }\n\n    return watchQueryOptions;\n  }\n\n  getDefaultFetchPolicy(): WatchQueryFetchPolicy {\n    return (\n      this.queryHookOptions.defaultOptions?.fetchPolicy ||\n      this.client.defaultOptions.watchQuery?.fetchPolicy ||\n      \"cache-first\"\n    );\n  }\n\n  // Defining these methods as no-ops on the prototype allows us to call\n  // state.onCompleted and/or state.onError without worrying about whether a\n  // callback was provided.\n  private onCompleted(data: TData) {}\n  private onError(error: ApolloError) {}\n\n  private observable: ObservableQuery<TData, TVariables>;\n  private obsQueryFields: Omit<\n    ObservableQueryFields<TData, TVariables>,\n    \"variables\"\n  >;\n\n  private useObservableQuery() {\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    const obsQuery = this.observable =\n      this.renderPromises\n        && this.renderPromises.getSSRObservable(this.watchQueryOptions)\n        || this.observable // Reuse this.observable if possible (and not SSR)\n        || this.client.watchQuery(this.getObsQueryOptions());\n\n    this.obsQueryFields = useMemo(() => ({\n      refetch: obsQuery.refetch.bind(obsQuery),\n      reobserve: obsQuery.reobserve.bind(obsQuery),\n      fetchMore: obsQuery.fetchMore.bind(obsQuery),\n      updateQuery: obsQuery.updateQuery.bind(obsQuery),\n      startPolling: obsQuery.startPolling.bind(obsQuery),\n      stopPolling: obsQuery.stopPolling.bind(obsQuery),\n      subscribeToMore: obsQuery.subscribeToMore.bind(obsQuery),\n    }), [obsQuery]);\n\n    const ssrAllowed = !(\n      this.queryHookOptions.ssr === false ||\n      this.queryHookOptions.skip\n    );\n\n    if (this.renderPromises && ssrAllowed) {\n      this.renderPromises.registerSSRObservable(obsQuery);\n\n      if (obsQuery.getCurrentResult().loading) {\n        // TODO: This is a legacy API which could probably be cleaned up\n        this.renderPromises.addObservableQueryPromise(obsQuery);\n      }\n    }\n\n    return obsQuery;\n  }\n\n  // These members are populated by getCurrentResult and setResult, and it's\n  // okay/normal for them to be initially undefined.\n  private result: undefined | ApolloQueryResult<TData>;\n  private previousData: undefined | TData;\n\n  private setResult(nextResult: ApolloQueryResult<TData>) {\n    const previousResult = this.result;\n    if (previousResult && previousResult.data) {\n      this.previousData = previousResult.data;\n    }\n    this.result = nextResult;\n    // Calling state.setResult always triggers an update, though some call sites\n    // perform additional equality checks before committing to an update.\n    this.forceUpdate();\n    this.handleErrorOrCompleted(nextResult);\n  }\n\n  private handleErrorOrCompleted(result: ApolloQueryResult<TData>) {\n    if (!result.loading) {\n      const error = this.toApolloError(result);\n\n      // wait a tick in case we are in the middle of rendering a component\n      Promise.resolve().then(() => {\n        if (error) {\n          this.onError(error);\n        } else if (result.data) {\n          this.onCompleted(result.data);\n        }\n      }).catch(error => {\n        invariant.warn(error);\n      });\n    }\n  }\n\n  private toApolloError(result: ApolloQueryResult<TData>): ApolloError | undefined {\n    return isNonEmptyArray(result.errors)\n      ? new ApolloError({ graphQLErrors: result.errors })\n      : result.error\n  }\n\n  private getCurrentResult(): ApolloQueryResult<TData> {\n    // Using this.result as a cache ensures getCurrentResult continues returning\n    // the same (===) result object, unless state.setResult has been called, or\n    // we're doing server rendering and therefore override the result below.\n    if (!this.result) {\n      this.handleErrorOrCompleted(\n        this.result = this.observable.getCurrentResult()\n      );\n    }\n    return this.result;\n  }\n\n  // This cache allows the referential stability of this.result (as returned by\n  // getCurrentResult) to translate into referential stability of the resulting\n  // QueryResult object returned by toQueryResult.\n  private toQueryResultCache = new (canUseWeakMap ? WeakMap : Map)<\n    ApolloQueryResult<TData>,\n    QueryResult<TData, TVariables>\n  >();\n\n  toQueryResult(\n    result: ApolloQueryResult<TData>,\n  ): QueryResult<TData, TVariables> {\n    let queryResult = this.toQueryResultCache.get(result);\n    if (queryResult) return queryResult;\n\n    const { data, partial, ...resultWithoutPartial } = result;\n    this.toQueryResultCache.set(result, queryResult = {\n      data, // Ensure always defined, even if result.data is missing.\n      ...resultWithoutPartial,\n      ...this.obsQueryFields,\n      client: this.client,\n      observable: this.observable,\n      variables: this.observable.variables,\n      called: !this.queryHookOptions.skip,\n      previousData: this.previousData,\n    });\n\n    if (!queryResult.error && isNonEmptyArray(result.errors)) {\n      // Until a set naming convention for networkError and graphQLErrors is\n      // decided upon, we map errors (graphQLErrors) to the error options.\n      // TODO: Is it possible for both result.error and result.errors to be\n      // defined here?\n      queryResult.error = new ApolloError({ graphQLErrors: result.errors });\n    }\n\n    return queryResult;\n  }\n\n  private unsafeHandlePartialRefetch(result: ApolloQueryResult<TData>) {\n    // WARNING: SIDE-EFFECTS IN THE RENDER FUNCTION\n    //\n    // TODO: This code should be removed when the partialRefetch option is\n    // removed. I was unable to get this hook to behave reasonably in certain\n    // edge cases when this block was put in an effect.\n    if (\n      result.partial &&\n      this.queryHookOptions.partialRefetch &&\n      !result.loading &&\n      (!result.data || Object.keys(result.data).length === 0) &&\n      this.observable.options.fetchPolicy !== 'cache-only'\n    ) {\n      Object.assign(result, {\n        loading: true,\n        networkStatus: NetworkStatus.refetch,\n      });\n      this.observable.refetch();\n    }\n  }\n}\n","import { invariant } from '../../utilities/globals';\nimport { useContext } from 'react';\nimport { ApolloClient } from '../../core';\nimport { getApolloContext } from '../context';\n\nexport function useApolloClient(\n  override?: ApolloClient<object>,\n): ApolloClient<object> {\n  const context = useContext(getApolloContext());\n  const client = override || context.client;\n  invariant(\n    !!client,\n    'Could not find \"client\" in the context or passed in as an option. ' +\n    'Wrap the root component in an <ApolloProvider>, or pass an ApolloClient ' +\n    'instance in via options.',\n  );\n\n  return client;\n}\n"],"names":["_regeneratorRuntime","require","_asyncToGenerator","exports","config","arguments","length","undefined","window","persistAtom","_config$key","key","_config$storage","storage","localStorage","updateState","newValue","state","isReset","setState","getState","toParse","getItem","parseState","then","JSON","parse","e","console","error","mergeItem","stringify","setItem","_ref","onSet","node","trigger","setSelf","s","hasOwnProperty","_ref2","mark","_callee","_","wrap","_context","prev","next","stop","_x","_x2","_x3","apply","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","value","done","Promise","module","fn","self","this","args","err","__esModule","_typeof","Op","Object","prototype","hasOwn","defineProperty","obj","desc","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","innerFn","outerFn","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","invoke","record","result","__await","unwrapped","previousPromise","callInvokeWithMethodAndArg","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","methodName","TypeError","resultName","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","i","displayName","isGeneratorFunction","genFun","ctor","constructor","name","setPrototypeOf","__proto__","awrap","async","iter","keys","val","object","reverse","pop","skipTempReset","charAt","slice","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","didWarnUncachedGetSnapshot","useSyncExternalStore","React","subscribe","getSnapshot","getServerSnapshot","__DEV__","invariant","_a","inst","forceUpdate","canUseLayoutEffect","assign","checkIfSnapshotChanged","_b","DocumentType","cache","Map","operationName","Query","Mutation","Subscription","verifyDocumentType","document","operation","variables","cached","get","kind","concat","fragments","queries","mutations","subscriptions","_i","definitions","x","definition","variableDefinitions","payload","set","parser","requiredOperationName","usedOperationName","useQuery","query","options","client","stateRef","useRef","current","InternalState","useState","setTick","tick","useInternalState","override","useContext","getApolloContext","useApolloClient","previous","asyncResolveFns","Set","optionsToIgnoreOnce","canUseWeakSet","WeakSet","ssrDisabledResult","maybeDeepFreeze","loading","data","networkStatus","NetworkStatus","skipStandbyResult","toQueryResultCache","canUseWeakMap","WeakMap","previousResult","previousData","asyncUpdate","signal","_this","watchQueryOptions","add","addEventListener","handleAborted","delete","removeEventListener","reason","renderPromises","useOptions","obsQuery","useObservableQuery","useCallback","onNext","getCurrentResult","equal","setResult","subscription","onError","last","unsubscribe","resetLastResults","disableNetworkFetches","unsafeHandlePartialRefetch","queryResult","toQueryResult","size","clear","createWatchQueryOptions","queryHookOptions","currentWatchQueryOptions","has","observable","reobserve","getObsQueryOptions","onCompleted","ssr","skip","fetchPolicy","toMerge","globalDefaults","defaultOptions","watchQuery","compact","reduce","mergeOptions","otherOptions","__rest","_c","getDefaultFetchPolicy","_d","initialFetchPolicy","getSSRObservable","obsQueryFields","useMemo","refetch","bind","fetchMore","updateQuery","startPolling","stopPolling","subscribeToMore","ssrAllowed","registerSSRObservable","addObservableQueryPromise","nextResult","handleErrorOrCompleted","error_1","toApolloError","catch","isNonEmptyArray","errors","ApolloError","graphQLErrors","resultWithoutPartial","partial","__assign","called","partialRefetch"],"sourceRoot":""}