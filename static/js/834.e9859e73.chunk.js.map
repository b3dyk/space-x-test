{"version":3,"file":"static/js/834.e9859e73.chunk.js","mappings":"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","sources":["pages/HomePage/HomePage.styled.ts","components/HeroSection/HeroSection.styled.ts","components/HeroSection/HeroSection.tsx","../node_modules/@apollo/src/react/hooks/useSyncExternalStore.ts","../node_modules/@apollo/src/react/parser/index.ts","../node_modules/@apollo/src/react/hooks/useQuery.ts","../node_modules/@apollo/src/react/hooks/useApolloClient.ts","components/CardsCarousel/CardsCarousel.styled.ts","components/CardsCarousel/CardsCarousel.tsx","pages/HomePage/HomePage.tsx"],"sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const ToursSection = styled.section`\r\n  padding-top: 96px;\r\n  padding-bottom: 96px;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledHeroSection = styled.section`\r\n  position: relative;\r\n  max-width: 1440px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n\r\n  background-color: var(--color-bg-hero);\r\n  text-align: center;\r\n  padding-top: 229px;\r\n  padding-bottom: 33px;\r\n\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n`;\r\n\r\nexport const CarouselHandler = styled.div`\r\n  position: absolute;\r\n  top: 59%;\r\n  left: 47%;\r\n  transform: translate(-50%, -50%);\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 8px;\r\n`;\r\n\r\nexport const Heading = styled.h1`\r\n  font-weight: 800;\r\n  font-size: 48px;\r\n  line-height: 1.208;\r\n  text-transform: uppercase;\r\n  color: var(--color-font-light);\r\n`;\r\n\r\nexport const StyledHeading = styled.h2`\r\n  margin-bottom: 36px;\r\n  margin-top: -56px;\r\n  font-weight: 800;\r\n  font-size: 310px;\r\n  line-height: 1.2;\r\n  text-transform: uppercase;\r\n  color: var(--color-font-light);\r\n`;\r\n\r\nexport const Anchor = styled.a`\r\n  display: inline-flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 8px;\r\n  text-decoration: none;\r\n  font-family: \"Lato\";\r\n  font-style: normal;\r\n  font-weight: 300;\r\n  font-size: 32px;\r\n  line-height: 1.1875;\r\n  color: var(--color-font-light);\r\n\r\n  text-shadow: 1px 0px 1px rgba(0, 0, 0, 1), 0px 1px 1px rgba(0, 0, 0, 1),\r\n    -1px 0px 1px rgba(0, 0, 0, 1), 0px -1px 1px rgba(0, 0, 0, 1);\r\n`;\r\n","import { useState } from \"react\";\r\n\r\nimport { SVG } from \"../../images\";\r\nimport { bgImages } from \"../../images\";\r\nimport { Container } from \"../../styles/commonStyles\";\r\n\r\nimport {\r\n  Heading,\r\n  StyledHeroSection,\r\n  StyledHeading,\r\n  Anchor,\r\n  CarouselHandler,\r\n} from \"./HeroSection.styled\";\r\n\r\nexport const HeroSection: React.FC = () => {\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n\r\n  const goToSlide = (imageIndex: number) => {\r\n    setCurrentIndex(imageIndex);\r\n  };\r\n\r\n  return (\r\n    <StyledHeroSection\r\n      style={{\r\n        backgroundImage: `linear-gradient(\r\n    rgba(47, 48, 58, 0.4),\r\n    rgba(47, 48, 58, 0.4)\r\n  ), url(${bgImages[currentIndex]})`,\r\n      }}\r\n    >\r\n      <CarouselHandler>\r\n        {bgImages.map((image: string, imageIndex: number) => (\r\n          <div key={imageIndex} onClick={() => goToSlide(imageIndex)}>\r\n            {currentIndex === imageIndex ? (\r\n              <SVG.CarouselDotFull style={{ cursor: \"pointer\" }} />\r\n            ) : (\r\n              <SVG.CarouselDot style={{ cursor: \"pointer\" }} />\r\n            )}\r\n          </div>\r\n        ))}\r\n      </CarouselHandler>\r\n      <Container>\r\n        <Heading>The space is waiting for</Heading>\r\n        <StyledHeading>You</StyledHeading>\r\n        <Anchor href=\"#tours\">\r\n          Explore tours\r\n          <SVG.ArrowDown />\r\n        </Anchor>\r\n      </Container>\r\n    </StyledHeroSection>\r\n  );\r\n};\r\n","import { invariant } from '../../utilities/globals';\nimport * as React from 'react';\n\nimport { canUseLayoutEffect } from '../../utilities';\n\nlet didWarnUncachedGetSnapshot = false;\n\ntype RealUseSESHookType =\n  // This import depends only on the @types/use-sync-external-store package, not\n  // the actual use-sync-external-store package, which is not installed. It\n  // might be nice to get this type from React 18, but it still needs to work\n  // when only React 17 or earlier is installed.\n  typeof import(\"use-sync-external-store\").useSyncExternalStore;\n\n// Prevent webpack from complaining about our feature detection of the\n// useSyncExternalStore property of the React namespace, which is expected not\n// to exist when using React 17 and earlier, and that's fine.\nconst uSESKey = \"useSyncExternalStore\" as keyof typeof React;\nconst realHook = React[uSESKey] as RealUseSESHookType | undefined;\n\n// Adapted from https://www.npmjs.com/package/use-sync-external-store, with\n// Apollo Client deviations called out by \"// DEVIATION ...\" comments.\n\n// When/if React.useSyncExternalStore is defined, delegate fully to it.\nexport const useSyncExternalStore: RealUseSESHookType = realHook || ((\n  subscribe,\n  getSnapshot,\n  getServerSnapshot,\n) => {\n  // Read the current snapshot from the store on every render. Again, this\n  // breaks the rules of React, and only works here because of specific\n  // implementation details, most importantly that updates are\n  // always synchronous.\n  const value = getSnapshot();\n  if (\n    // DEVIATION: Using our own __DEV__ polyfill (from ../../utilities/globals).\n    __DEV__ &&\n    !didWarnUncachedGetSnapshot &&\n    // DEVIATION: Not using Object.is because we know our snapshots will never\n    // be exotic primitive values like NaN, which is !== itself.\n    value !== getSnapshot()\n  ) {\n    didWarnUncachedGetSnapshot = true;\n    // DEVIATION: Using invariant.error instead of console.error directly.\n    invariant.error(\n      'The result of getSnapshot should be cached to avoid an infinite loop',\n    );\n  }\n\n  // Because updates are synchronous, we don't queue them. Instead we force a\n  // re-render whenever the subscribed state changes by updating an some\n  // arbitrary useState hook. Then, during render, we call getSnapshot to read\n  // the current value.\n  //\n  // Because we don't actually use the state returned by the useState hook, we\n  // can save a bit of memory by storing other stuff in that slot.\n  //\n  // To implement the early bailout, we need to track some things on a mutable\n  // object. Usually, we would put that in a useRef hook, but we can stash it in\n  // our useState hook instead.\n  //\n  // To force a re-render, we call forceUpdate({inst}). That works because the\n  // new object always fails an equality check.\n  const [{inst}, forceUpdate] = React.useState({inst: {value, getSnapshot}});\n\n  // Track the latest getSnapshot function with a ref. This needs to be updated\n  // in the layout phase so we can access it during the tearing check that\n  // happens on subscribe.\n  if (canUseLayoutEffect) {\n    // DEVIATION: We avoid calling useLayoutEffect when !canUseLayoutEffect,\n    // which may seem like a conditional hook, but this code ends up behaving\n    // unconditionally (one way or the other) because canUseLayoutEffect is\n    // constant.\n    React.useLayoutEffect(() => {\n      Object.assign(inst, { value, getSnapshot });\n      // Whenever getSnapshot or subscribe changes, we need to check in the\n      // commit phase if there was an interleaved mutation. In concurrent mode\n      // this can happen all the time, but even in synchronous mode, an earlier\n      // effect may have mutated the store.\n      if (checkIfSnapshotChanged(inst)) {\n        // Force a re-render.\n        forceUpdate({inst});\n      }\n    }, [subscribe, value, getSnapshot]);\n  } else {\n    Object.assign(inst, { value, getSnapshot });\n  }\n\n  React.useEffect(() => {\n    // Check for changes right before subscribing. Subsequent changes will be\n    // detected in the subscription handler.\n    if (checkIfSnapshotChanged(inst)) {\n      // Force a re-render.\n      forceUpdate({inst});\n    }\n\n    // Subscribe to the store and return a clean-up function.\n    return subscribe(function handleStoreChange() {\n      // TODO: Because there is no cross-renderer API for batching updates, it's\n      // up to the consumer of this library to wrap their subscription event\n      // with unstable_batchedUpdates. Should we try to detect when this isn't\n      // the case and print a warning in development?\n\n      // The store changed. Check if the snapshot changed since the last time we\n      // read from the store.\n      if (checkIfSnapshotChanged(inst)) {\n        // Force a re-render.\n        forceUpdate({inst});\n      }\n    });\n  }, [subscribe]);\n\n  return value;\n});\n\nfunction checkIfSnapshotChanged<Snapshot>({\n  value,\n  getSnapshot,\n}: {\n  value: Snapshot;\n  getSnapshot: () => Snapshot;\n}): boolean {\n  try {\n    return value !== getSnapshot();\n  } catch {\n    return true;\n  }\n}\n","import { invariant } from '../../utilities/globals';\n\nimport {\n  DocumentNode,\n  DefinitionNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode\n} from 'graphql';\n\nexport enum DocumentType {\n  Query,\n  Mutation,\n  Subscription\n}\n\nexport interface IDocumentDefinition {\n  type: DocumentType;\n  name: string;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\nconst cache = new Map();\n\nexport function operationName(type: DocumentType) {\n  let name;\n  switch (type) {\n    case DocumentType.Query:\n      name = 'Query';\n      break;\n    case DocumentType.Mutation:\n      name = 'Mutation';\n      break;\n    case DocumentType.Subscription:\n      name = 'Subscription';\n      break;\n  }\n  return name;\n}\n\n// This parser is mostly used to safety check incoming documents.\nexport function parser(document: DocumentNode): IDocumentDefinition {\n  const cached = cache.get(document);\n  if (cached) return cached;\n\n  let variables, type, name;\n\n  invariant(\n    !!document && !!document.kind,\n    `Argument of ${document} passed to parser was not a valid GraphQL ` +\n      `DocumentNode. You may need to use 'graphql-tag' or another method ` +\n      `to convert your operation into a document`\n  );\n\n  const fragments: DefinitionNode[] = []\n  const queries: DefinitionNode[] = []\n  const mutations: DefinitionNode[] = []\n  const subscriptions: DefinitionNode[] = []\n\n  for (const x of document.definitions) {\n    if (x.kind === 'FragmentDefinition') {\n      fragments.push(x);\n      continue\n    }\n\n    if (x.kind === 'OperationDefinition') {\n      switch (x.operation) {\n        case 'query':\n          queries.push(x);\n          break;\n        case 'mutation':\n          mutations.push(x);\n          break;\n        case 'subscription':\n          subscriptions.push(x);\n          break;\n      }\n    }\n  }\n\n  invariant(\n    !fragments.length ||\n      (queries.length || mutations.length || subscriptions.length),\n    `Passing only a fragment to 'graphql' is not yet supported. ` +\n      `You must include a query, subscription or mutation as well`\n  );\n\n  invariant(\n    queries.length + mutations.length + subscriptions.length <= 1,\n    `react-apollo only supports a query, subscription, or a mutation per HOC. ` +\n      `${document} had ${queries.length} queries, ${subscriptions.length} ` +\n      `subscriptions and ${mutations.length} mutations. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n\n  const definitions = queries.length\n    ? queries\n    : mutations.length\n    ? mutations\n    : subscriptions;\n\n  invariant(\n    definitions.length === 1,\n    `react-apollo only supports one definition per HOC. ${document} had ` +\n      `${definitions.length} definitions. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  const definition = definitions[0] as OperationDefinitionNode;\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data'; // fallback to using data if no name\n  }\n\n  const payload = { name, type, variables };\n  cache.set(document, payload);\n  return payload;\n}\n\nexport function verifyDocumentType(document: DocumentNode, type: DocumentType) {\n  const operation = parser(document);\n  const requiredOperationName = operationName(type);\n  const usedOperationName = operationName(operation.type);\n  invariant(\n    operation.type === type,\n    `Running a ${requiredOperationName} requires a graphql ` +\n      `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n  );\n}\n\n","import { invariant } from '../../utilities/globals';\n\nimport {\n  useCallback,\n  useContext,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { useSyncExternalStore } from './useSyncExternalStore';\nimport { equal } from '@wry/equality';\n\nimport { mergeOptions, OperationVariables, WatchQueryFetchPolicy } from '../../core';\nimport { ApolloContextValue, getApolloContext } from '../context';\nimport { ApolloError } from '../../errors';\nimport {\n  ApolloClient,\n  ApolloQueryResult,\n  NetworkStatus,\n  ObservableQuery,\n  DocumentNode,\n  TypedDocumentNode,\n  WatchQueryOptions,\n} from '../../core';\nimport {\n  QueryHookOptions,\n  QueryResult,\n  ObservableQueryFields,\n} from '../types/types';\n\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport { useApolloClient } from './useApolloClient';\nimport { canUseWeakMap, canUseWeakSet, compact, isNonEmptyArray, maybeDeepFreeze } from '../../utilities';\n\nconst {\n  prototype: {\n    hasOwnProperty,\n  },\n} = Object;\n\nexport function useQuery<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: QueryHookOptions<TData, TVariables> = Object.create(null),\n): QueryResult<TData, TVariables> {\n  return useInternalState(\n    useApolloClient(options.client),\n    query,\n  ).useQuery(options);\n}\n\nexport function useInternalState<TData, TVariables extends OperationVariables>(\n  client: ApolloClient<any>,\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n): InternalState<TData, TVariables> {\n  const stateRef = useRef<InternalState<TData, TVariables>>();\n  if (\n    !stateRef.current ||\n    client !== stateRef.current.client ||\n    query !== stateRef.current.query\n  ) {\n    stateRef.current = new InternalState(client, query, stateRef.current);\n  }\n  const state = stateRef.current;\n\n  // By default, InternalState.prototype.forceUpdate is an empty function, but\n  // we replace it here (before anyone has had a chance to see this state yet)\n  // with a function that unconditionally forces an update, using the latest\n  // setTick function. Updating this state by calling state.forceUpdate is the\n  // only way we trigger React component updates (no other useState calls within\n  // the InternalState class).\n  const [_tick, setTick] = useState(0);\n  state.forceUpdate = () => {\n    setTick(tick => tick + 1);\n  };\n\n  return state;\n}\n\nclass InternalState<TData, TVariables extends OperationVariables> {\n  constructor(\n    public readonly client: ReturnType<typeof useApolloClient>,\n    public readonly query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n    previous?: InternalState<TData, TVariables>,\n  ) {\n    verifyDocumentType(query, DocumentType.Query);\n\n    // Reuse previousData from previous InternalState (if any) to provide\n    // continuity of previousData even if/when the query or client changes.\n    const previousResult = previous && previous.result;\n    const previousData = previousResult && previousResult.data;\n    if (previousData) {\n      this.previousData = previousData;\n    }\n  }\n\n  forceUpdate() {\n    // Replaced (in useInternalState) with a method that triggers an update.\n    invariant.warn(\"Calling default no-op implementation of InternalState#forceUpdate\");\n  }\n\n  asyncUpdate(signal: AbortSignal) {\n    return new Promise<QueryResult<TData, TVariables>>((resolve, reject) => {\n      const watchQueryOptions = this.watchQueryOptions;\n\n      const handleAborted = () => {\n        this.asyncResolveFns.delete(resolve)\n        this.optionsToIgnoreOnce.delete(watchQueryOptions);\n        signal.removeEventListener('abort', handleAborted)\n        reject(signal.reason);\n      };\n\n      this.asyncResolveFns.add(resolve);\n      this.optionsToIgnoreOnce.add(watchQueryOptions);\n      signal.addEventListener('abort', handleAborted)\n      this.forceUpdate();\n    });\n  }\n\n  private asyncResolveFns = new Set<\n    (result: QueryResult<TData, TVariables>) => void\n  >();\n\n  private optionsToIgnoreOnce = new (canUseWeakSet ? WeakSet : Set)<\n    WatchQueryOptions<TVariables, TData>\n  >();\n\n  // Methods beginning with use- should be called according to the standard\n  // rules of React hooks: only at the top level of the calling function, and\n  // without any dynamic conditional logic.\n  useQuery(options: QueryHookOptions<TData, TVariables>) {\n    // The renderPromises field gets initialized here in the useQuery method, at\n    // the beginning of everything (for a given component rendering, at least),\n    // so we can safely use this.renderPromises in other/later InternalState\n    // methods without worrying it might be uninitialized. Even after\n    // initialization, this.renderPromises is usually undefined (unless SSR is\n    // happening), but that's fine as long as it has been initialized that way,\n    // rather than left uninitialized.\n    this.renderPromises = useContext(getApolloContext()).renderPromises;\n\n    this.useOptions(options);\n\n    const obsQuery = this.useObservableQuery();\n\n    const result = useSyncExternalStore(\n      useCallback(() => {\n        if (this.renderPromises) {\n          return () => {};\n        }\n\n        const onNext = () => {\n          const previousResult = this.result;\n          // We use `getCurrentResult()` instead of the onNext argument because\n          // the values differ slightly. Specifically, loading results will have\n          // an empty object for data instead of `undefined` for some reason.\n          const result = obsQuery.getCurrentResult();\n          // Make sure we're not attempting to re-render similar results\n          if (\n            previousResult &&\n            previousResult.loading === result.loading &&\n            previousResult.networkStatus === result.networkStatus &&\n            equal(previousResult.data, result.data)\n          ) {\n            return;\n          }\n\n          this.setResult(result);\n        };\n\n        const onError = (error: Error) => {\n          const last = obsQuery[\"last\"];\n          subscription.unsubscribe();\n          // Unfortunately, if `lastError` is set in the current\n          // `observableQuery` when the subscription is re-created,\n          // the subscription will immediately receive the error, which will\n          // cause it to terminate again. To avoid this, we first clear\n          // the last error/result from the `observableQuery` before re-starting\n          // the subscription, and restore it afterwards (so the subscription\n          // has a chance to stay open).\n          try {\n            obsQuery.resetLastResults();\n            subscription = obsQuery.subscribe(onNext, onError);\n          } finally {\n            obsQuery[\"last\"] = last;\n          }\n\n          if (!hasOwnProperty.call(error, 'graphQLErrors')) {\n            // The error is not a GraphQL error\n            throw error;\n          }\n\n          const previousResult = this.result;\n          if (\n            !previousResult ||\n            (previousResult && previousResult.loading) ||\n            !equal(error, previousResult.error)\n          ) {\n            this.setResult({\n              data: (previousResult && previousResult.data) as TData,\n              error: error as ApolloError,\n              loading: false,\n              networkStatus: NetworkStatus.error,\n            });\n          }\n        };\n\n        let subscription = obsQuery.subscribe(onNext, onError);\n\n        return () => subscription.unsubscribe();\n      }, [\n        // We memoize the subscribe function using useCallback and the following\n        // dependency keys, because the subscribe function reference is all that\n        // useSyncExternalStore uses internally as a dependency key for the\n        // useEffect ultimately responsible for the subscription, so we are\n        // effectively passing this dependency array to that useEffect buried\n        // inside useSyncExternalStore, as desired.\n        obsQuery,\n        this.renderPromises,\n        this.client.disableNetworkFetches,\n      ]),\n\n      () => this.getCurrentResult(),\n      () => this.getCurrentResult(),\n    );\n\n    // TODO Remove this method when we remove support for options.partialRefetch.\n    this.unsafeHandlePartialRefetch(result);\n\n    const queryResult = this.toQueryResult(result);\n\n    if (!queryResult.loading && this.asyncResolveFns.size) {\n      this.asyncResolveFns.forEach(resolve => resolve(queryResult));\n      this.asyncResolveFns.clear();\n    }\n\n    return queryResult;\n  }\n\n  // These members (except for renderPromises) are all populated by the\n  // useOptions method, which is called unconditionally at the beginning of the\n  // useQuery method, so we can safely use these members in other/later methods\n  // without worrying they might be uninitialized.\n  private renderPromises: ApolloContextValue[\"renderPromises\"];\n  private queryHookOptions: QueryHookOptions<TData, TVariables>;\n  private watchQueryOptions: WatchQueryOptions<TVariables, TData>;\n\n  private useOptions(\n    options: QueryHookOptions<TData, TVariables>,\n  ) {\n    const watchQueryOptions = this.createWatchQueryOptions(\n      this.queryHookOptions = options,\n    );\n\n    // Update this.watchQueryOptions, but only when they have changed, which\n    // allows us to depend on the referential stability of\n    // this.watchQueryOptions elsewhere.\n    const currentWatchQueryOptions = this.watchQueryOptions;\n\n    // To force this equality test to \"fail,\" thereby reliably triggering\n    // observable.reobserve, add any current WatchQueryOptions object(s) you\n    // want to be ignored to this.optionsToIgnoreOnce. A similar effect could be\n    // achieved by nullifying this.watchQueryOptions so the equality test\n    // immediately fails because currentWatchQueryOptions is null, but this way\n    // we can promise a truthy this.watchQueryOptions at all times.\n    if (\n      this.optionsToIgnoreOnce.has(currentWatchQueryOptions) ||\n      !equal(watchQueryOptions, currentWatchQueryOptions)\n    ) {\n      this.watchQueryOptions = watchQueryOptions;\n\n      if (currentWatchQueryOptions && this.observable) {\n        // As advertised in the -Once of this.optionsToIgnoreOnce, this trick is\n        // only good for one forced execution of observable.reobserve per\n        // ignored WatchQueryOptions object, though it is unlikely we will ever\n        // see this exact currentWatchQueryOptions object again here, since we\n        // just replaced this.watchQueryOptions with watchQueryOptions.\n        this.optionsToIgnoreOnce.delete(currentWatchQueryOptions);\n\n        // Though it might be tempting to postpone this reobserve call to the\n        // useEffect block, we need getCurrentResult to return an appropriate\n        // loading:true result synchronously (later within the same call to\n        // useQuery). Since we already have this.observable here (not true for\n        // the very first call to useQuery), we are not initiating any new\n        // subscriptions, though it does feel less than ideal that reobserve\n        // (potentially) kicks off a network request (for example, when the\n        // variables have changed), which is technically a side-effect.\n        this.observable.reobserve(this.getObsQueryOptions());\n\n        // Make sure getCurrentResult returns a fresh ApolloQueryResult<TData>,\n        // but save the current data as this.previousData, just like setResult\n        // usually does.\n        this.previousData = this.result?.data || this.previousData;\n        this.result = void 0;\n      }\n    }\n\n    // Make sure state.onCompleted and state.onError always reflect the latest\n    // options.onCompleted and options.onError callbacks provided to useQuery,\n    // since those functions are often recreated every time useQuery is called.\n    // Like the forceUpdate method, the versions of these methods inherited from\n    // InternalState.prototype are empty no-ops, but we can override them on the\n    // base state object (without modifying the prototype).\n    this.onCompleted = options.onCompleted || InternalState.prototype.onCompleted;\n    this.onError = options.onError || InternalState.prototype.onError;\n\n    if (\n      (this.renderPromises || this.client.disableNetworkFetches) &&\n      this.queryHookOptions.ssr === false &&\n      !this.queryHookOptions.skip\n    ) {\n      // If SSR has been explicitly disabled, and this function has been called\n      // on the server side, return the default loading state.\n      this.result = this.ssrDisabledResult;\n    } else if (\n      this.queryHookOptions.skip ||\n      this.watchQueryOptions.fetchPolicy === 'standby'\n    ) {\n      // When skipping a query (ie. we're not querying for data but still want to\n      // render children), make sure the `data` is cleared out and `loading` is\n      // set to `false` (since we aren't loading anything).\n      //\n      // NOTE: We no longer think this is the correct behavior. Skipping should\n      // not automatically set `data` to `undefined`, but instead leave the\n      // previous data in place. In other words, skipping should not mandate that\n      // previously received data is all of a sudden removed. Unfortunately,\n      // changing this is breaking, so we'll have to wait until Apollo Client 4.0\n      // to address this.\n      this.result = this.skipStandbyResult;\n    } else if (\n      this.result === this.ssrDisabledResult ||\n      this.result === this.skipStandbyResult\n    ) {\n      this.result = void 0;\n    }\n  }\n\n  private getObsQueryOptions(): WatchQueryOptions<TVariables, TData> {\n    const toMerge: Array<\n      Partial<WatchQueryOptions<TVariables, TData>>\n    > = [];\n\n    const globalDefaults = this.client.defaultOptions.watchQuery;\n    if (globalDefaults) toMerge.push(globalDefaults);\n\n    if (this.queryHookOptions.defaultOptions) {\n      toMerge.push(this.queryHookOptions.defaultOptions);\n    }\n\n    // We use compact rather than mergeOptions for this part of the merge,\n    // because we want watchQueryOptions.variables (if defined) to replace\n    // this.observable.options.variables whole. This replacement allows\n    // removing variables by removing them from the variables input to\n    // useQuery. If the variables were always merged together (rather than\n    // replaced), there would be no way to remove existing variables.\n    // However, the variables from options.defaultOptions and globalDefaults\n    // (if provided) should be merged, to ensure individual defaulted\n    // variables always have values, if not otherwise defined in\n    // observable.options or watchQueryOptions.\n    toMerge.push(compact(\n      this.observable && this.observable.options,\n      this.watchQueryOptions,\n    ));\n\n    return toMerge.reduce(\n      mergeOptions\n    ) as WatchQueryOptions<TVariables, TData>;\n  }\n\n  private ssrDisabledResult = maybeDeepFreeze({\n    loading: true,\n    data: void 0 as unknown as TData,\n    error: void 0,\n    networkStatus: NetworkStatus.loading,\n  });\n\n  private skipStandbyResult = maybeDeepFreeze({\n    loading: false,\n    data: void 0 as unknown as TData,\n    error: void 0,\n    networkStatus: NetworkStatus.ready,\n  });\n\n  // A function to massage options before passing them to ObservableQuery.\n  private createWatchQueryOptions({\n    skip,\n    ssr,\n    onCompleted,\n    onError,\n    defaultOptions,\n    // The above options are useQuery-specific, so this ...otherOptions spread\n    // makes otherOptions almost a WatchQueryOptions object, except for the\n    // query property that we add below.\n    ...otherOptions\n  }: QueryHookOptions<TData, TVariables> = {}): WatchQueryOptions<TVariables, TData> {\n    // This Object.assign is safe because otherOptions is a fresh ...rest object\n    // that did not exist until just now, so modifications are still allowed.\n    const watchQueryOptions: WatchQueryOptions<TVariables, TData> =\n      Object.assign(otherOptions, { query: this.query });\n\n    if (\n      this.renderPromises &&\n      (\n        watchQueryOptions.fetchPolicy === 'network-only' ||\n        watchQueryOptions.fetchPolicy === 'cache-and-network'\n      )\n    ) {\n      // this behavior was added to react-apollo without explanation in this PR\n      // https://github.com/apollographql/react-apollo/pull/1579\n      watchQueryOptions.fetchPolicy = 'cache-first';\n    }\n\n    if (!watchQueryOptions.variables) {\n      watchQueryOptions.variables = {} as TVariables;\n    }\n\n    if (skip) {\n      const {\n        fetchPolicy = this.getDefaultFetchPolicy(),\n        initialFetchPolicy = fetchPolicy,\n      } = watchQueryOptions;\n\n      // When skipping, we set watchQueryOptions.fetchPolicy initially to\n      // \"standby\", but we also need/want to preserve the initial non-standby\n      // fetchPolicy that would have been used if not skipping.\n      Object.assign(watchQueryOptions, {\n        initialFetchPolicy,\n        fetchPolicy: 'standby',\n      });\n    } else if (!watchQueryOptions.fetchPolicy) {\n      watchQueryOptions.fetchPolicy =\n        this.observable?.options.initialFetchPolicy ||\n        this.getDefaultFetchPolicy();\n    }\n\n    return watchQueryOptions;\n  }\n\n  getDefaultFetchPolicy(): WatchQueryFetchPolicy {\n    return (\n      this.queryHookOptions.defaultOptions?.fetchPolicy ||\n      this.client.defaultOptions.watchQuery?.fetchPolicy ||\n      \"cache-first\"\n    );\n  }\n\n  // Defining these methods as no-ops on the prototype allows us to call\n  // state.onCompleted and/or state.onError without worrying about whether a\n  // callback was provided.\n  private onCompleted(data: TData) {}\n  private onError(error: ApolloError) {}\n\n  private observable: ObservableQuery<TData, TVariables>;\n  private obsQueryFields: Omit<\n    ObservableQueryFields<TData, TVariables>,\n    \"variables\"\n  >;\n\n  private useObservableQuery() {\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    const obsQuery = this.observable =\n      this.renderPromises\n        && this.renderPromises.getSSRObservable(this.watchQueryOptions)\n        || this.observable // Reuse this.observable if possible (and not SSR)\n        || this.client.watchQuery(this.getObsQueryOptions());\n\n    this.obsQueryFields = useMemo(() => ({\n      refetch: obsQuery.refetch.bind(obsQuery),\n      reobserve: obsQuery.reobserve.bind(obsQuery),\n      fetchMore: obsQuery.fetchMore.bind(obsQuery),\n      updateQuery: obsQuery.updateQuery.bind(obsQuery),\n      startPolling: obsQuery.startPolling.bind(obsQuery),\n      stopPolling: obsQuery.stopPolling.bind(obsQuery),\n      subscribeToMore: obsQuery.subscribeToMore.bind(obsQuery),\n    }), [obsQuery]);\n\n    const ssrAllowed = !(\n      this.queryHookOptions.ssr === false ||\n      this.queryHookOptions.skip\n    );\n\n    if (this.renderPromises && ssrAllowed) {\n      this.renderPromises.registerSSRObservable(obsQuery);\n\n      if (obsQuery.getCurrentResult().loading) {\n        // TODO: This is a legacy API which could probably be cleaned up\n        this.renderPromises.addObservableQueryPromise(obsQuery);\n      }\n    }\n\n    return obsQuery;\n  }\n\n  // These members are populated by getCurrentResult and setResult, and it's\n  // okay/normal for them to be initially undefined.\n  private result: undefined | ApolloQueryResult<TData>;\n  private previousData: undefined | TData;\n\n  private setResult(nextResult: ApolloQueryResult<TData>) {\n    const previousResult = this.result;\n    if (previousResult && previousResult.data) {\n      this.previousData = previousResult.data;\n    }\n    this.result = nextResult;\n    // Calling state.setResult always triggers an update, though some call sites\n    // perform additional equality checks before committing to an update.\n    this.forceUpdate();\n    this.handleErrorOrCompleted(nextResult);\n  }\n\n  private handleErrorOrCompleted(result: ApolloQueryResult<TData>) {\n    if (!result.loading) {\n      const error = this.toApolloError(result);\n\n      // wait a tick in case we are in the middle of rendering a component\n      Promise.resolve().then(() => {\n        if (error) {\n          this.onError(error);\n        } else if (result.data) {\n          this.onCompleted(result.data);\n        }\n      }).catch(error => {\n        invariant.warn(error);\n      });\n    }\n  }\n\n  private toApolloError(result: ApolloQueryResult<TData>): ApolloError | undefined {\n    return isNonEmptyArray(result.errors)\n      ? new ApolloError({ graphQLErrors: result.errors })\n      : result.error\n  }\n\n  private getCurrentResult(): ApolloQueryResult<TData> {\n    // Using this.result as a cache ensures getCurrentResult continues returning\n    // the same (===) result object, unless state.setResult has been called, or\n    // we're doing server rendering and therefore override the result below.\n    if (!this.result) {\n      this.handleErrorOrCompleted(\n        this.result = this.observable.getCurrentResult()\n      );\n    }\n    return this.result;\n  }\n\n  // This cache allows the referential stability of this.result (as returned by\n  // getCurrentResult) to translate into referential stability of the resulting\n  // QueryResult object returned by toQueryResult.\n  private toQueryResultCache = new (canUseWeakMap ? WeakMap : Map)<\n    ApolloQueryResult<TData>,\n    QueryResult<TData, TVariables>\n  >();\n\n  toQueryResult(\n    result: ApolloQueryResult<TData>,\n  ): QueryResult<TData, TVariables> {\n    let queryResult = this.toQueryResultCache.get(result);\n    if (queryResult) return queryResult;\n\n    const { data, partial, ...resultWithoutPartial } = result;\n    this.toQueryResultCache.set(result, queryResult = {\n      data, // Ensure always defined, even if result.data is missing.\n      ...resultWithoutPartial,\n      ...this.obsQueryFields,\n      client: this.client,\n      observable: this.observable,\n      variables: this.observable.variables,\n      called: !this.queryHookOptions.skip,\n      previousData: this.previousData,\n    });\n\n    if (!queryResult.error && isNonEmptyArray(result.errors)) {\n      // Until a set naming convention for networkError and graphQLErrors is\n      // decided upon, we map errors (graphQLErrors) to the error options.\n      // TODO: Is it possible for both result.error and result.errors to be\n      // defined here?\n      queryResult.error = new ApolloError({ graphQLErrors: result.errors });\n    }\n\n    return queryResult;\n  }\n\n  private unsafeHandlePartialRefetch(result: ApolloQueryResult<TData>) {\n    // WARNING: SIDE-EFFECTS IN THE RENDER FUNCTION\n    //\n    // TODO: This code should be removed when the partialRefetch option is\n    // removed. I was unable to get this hook to behave reasonably in certain\n    // edge cases when this block was put in an effect.\n    if (\n      result.partial &&\n      this.queryHookOptions.partialRefetch &&\n      !result.loading &&\n      (!result.data || Object.keys(result.data).length === 0) &&\n      this.observable.options.fetchPolicy !== 'cache-only'\n    ) {\n      Object.assign(result, {\n        loading: true,\n        networkStatus: NetworkStatus.refetch,\n      });\n      this.observable.refetch();\n    }\n  }\n}\n","import { invariant } from '../../utilities/globals';\nimport { useContext } from 'react';\nimport { ApolloClient } from '../../core';\nimport { getApolloContext } from '../context';\n\nexport function useApolloClient(\n  override?: ApolloClient<object>,\n): ApolloClient<object> {\n  const context = useContext(getApolloContext());\n  const client = override || context.client;\n  invariant(\n    !!client,\n    'Could not find \"client\" in the context or passed in as an option. ' +\n    'Wrap the root component in an <ApolloProvider>, or pass an ApolloClient ' +\n    'instance in via options.',\n  );\n\n  return client;\n}\n","import styled from \"styled-components\";\r\n\r\nexport const Thumb = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin-bottom: 43px;\r\n`;\r\n\r\nexport const BtnWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 16px;\r\n`;\r\n\r\nexport const ToursHeading = styled.h2`\r\n  font-weight: 800;\r\n  font-size: 32px;\r\n  line-height: 1.1875;\r\n  text-transform: uppercase;\r\n`;\r\n\r\nexport const ListWrapper = styled.div`\r\n  overflow: hidden;\r\n`;\r\n\r\nexport const List = styled.ul`\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: flex-start;\r\n  gap: 24px;\r\n  transition: var(--anim);\r\n`;\r\n\r\nexport const CardCarousel = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  gap: 8px;\r\n  margin-top: 40px;\r\n`;\r\n","import { useQuery } from \"@apollo/client\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nimport { GET_ROCKETS } from \"../../apollo/client\";\r\nimport { SVG } from \"../../images\";\r\nimport { cardImages } from \"../../images\";\r\nimport { Card } from \"../../components/Card/Card\";\r\nimport { RocketWithImgType, RocketType, RocketsType } from \"../../types/types\";\r\nimport { CARDS_SHOWN } from \"../../constants/constants\";\r\n\r\nimport {\r\n  BtnWrapper,\r\n  ToursHeading,\r\n  Thumb,\r\n  List,\r\n  ListWrapper,\r\n  CardCarousel,\r\n} from \"./CardsCarousel.styled\";\r\nimport { StyledIconButton } from \"../IconButton/IconButton.styled\";\r\nimport { HiddenTitle } from \"../../styles/commonStyles\";\r\n\r\nexport const CardsCarousel: React.FC = () => {\r\n  const { loading, error, data } = useQuery(GET_ROCKETS);\r\n  const [currentIdx, setCurrentIdx] = useState(0);\r\n  const [rockets, setRockets] = useState<RocketsType>([]);\r\n\r\n  const prev = () =>\r\n    setCurrentIdx((currentIdx) =>\r\n      currentIdx === 0 ? data.rockets.length - CARDS_SHOWN : currentIdx - 1\r\n    );\r\n  const next = () =>\r\n    setCurrentIdx((currentIdx) =>\r\n      currentIdx === data.rockets.length - CARDS_SHOWN ? 0 : currentIdx + 1\r\n    );\r\n\r\n  const carouselHandler = (index: number) => {\r\n    setCurrentIdx(index);\r\n  };\r\n\r\n  const numberOfPages = (arrayLength: number) => {\r\n    return arrayLength - CARDS_SHOWN + 1;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      setRockets(\r\n        data.rockets.map((rocket: RocketType, idx: number) => {\r\n          const newRocket = {\r\n            ...rocket,\r\n            image: {\r\n              uri: cardImages[idx % 3].uri,\r\n              alt: cardImages[idx % 3].alt,\r\n            },\r\n          };\r\n          return newRocket;\r\n        })\r\n      );\r\n    }\r\n  }, [data]);\r\n\r\n  return (\r\n    <>\r\n      <Thumb>\r\n        <ToursHeading>Popular tours</ToursHeading>\r\n        <BtnWrapper>\r\n          <StyledIconButton type=\"button\" onClick={prev}>\r\n            <SVG.ArrowLeft />\r\n            <HiddenTitle>Previous</HiddenTitle>\r\n          </StyledIconButton>\r\n          <StyledIconButton type=\"button\" onClick={next}>\r\n            <SVG.ArrowRight />\r\n            <HiddenTitle>Next</HiddenTitle>\r\n          </StyledIconButton>\r\n        </BtnWrapper>\r\n      </Thumb>\r\n      {error && <p>{error.message}</p>}\r\n      {loading ? (\r\n        <p>Loading...</p>\r\n      ) : (\r\n        <ListWrapper>\r\n          <List style={{ transform: `translateX(-${currentIdx * 33.75}%)` }}>\r\n            {rockets.map((rocket: RocketWithImgType) => (\r\n              <Card key={rocket.id} rocket={rocket} />\r\n            ))}\r\n          </List>\r\n          <CardCarousel>\r\n            {rockets\r\n              .slice(0, numberOfPages(rockets.length))\r\n              .map((rocket: RocketWithImgType, idx: number) => (\r\n                <div key={rocket.id} onClick={() => carouselHandler(idx)}>\r\n                  {currentIdx === idx ? (\r\n                    <SVG.CarouselDotFullDark style={{ cursor: \"pointer\" }} />\r\n                  ) : (\r\n                    <SVG.CarouselDotDark style={{ cursor: \"pointer\" }} />\r\n                  )}\r\n                </div>\r\n              ))}\r\n          </CardCarousel>\r\n        </ListWrapper>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import { ReactElement } from \"react\";\r\n\r\nimport { ToursSection } from \"./HomePage.styled\";\r\nimport { HeroSection } from \"../../components/HeroSection/HeroSection\";\r\nimport { CardsCarousel } from \"../../components/CardsCarousel/CardsCarousel\";\r\nimport { Container } from \"../../styles/commonStyles\";\r\n\r\nconst HomePage: React.FC = (): ReactElement => {\r\n  return (\r\n    <>\r\n      <HeroSection />\r\n\r\n      <ToursSection id=\"tours\">\r\n        <Container>\r\n          <CardsCarousel />\r\n        </Container>\r\n      </ToursSection>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n"],"names":["ToursSection","styled","_templateObject","_taggedTemplateLiteral","StyledHeroSection","CarouselHandler","_templateObject2","Heading","_templateObject3","StyledHeading","_templateObject4","Anchor","_templateObject5","HeroSection","_useState","useState","_useState2","_slicedToArray","currentIndex","setCurrentIndex","_jsxs","style","backgroundImage","concat","bgImages","children","_jsx","image","imageIndex","onClick","goToSlide","SVG","cursor","Container","href","didWarnUncachedGetSnapshot","useSyncExternalStore","React","subscribe","getSnapshot","getServerSnapshot","value","__DEV__","invariant","_a","inst","forceUpdate","canUseLayoutEffect","Object","assign","checkIfSnapshotChanged","_b","DocumentType","cache","Map","operationName","type","name","Query","Mutation","Subscription","verifyDocumentType","document","operation","variables","cached","get","kind","fragments","queries","mutations","subscriptions","_i","definitions","length","x","push","definition","variableDefinitions","payload","set","parser","requiredOperationName","usedOperationName","hasOwnProperty","prototype","useQuery","query","options","create","client","stateRef","useRef","current","InternalState","state","setTick","tick","useInternalState","override","context","useContext","getApolloContext","useApolloClient","previous","asyncResolveFns","Set","optionsToIgnoreOnce","canUseWeakSet","WeakSet","ssrDisabledResult","maybeDeepFreeze","loading","data","error","networkStatus","NetworkStatus","skipStandbyResult","toQueryResultCache","canUseWeakMap","WeakMap","previousResult","result","previousData","this","asyncUpdate","signal","_this","Promise","resolve","reject","watchQueryOptions","add","addEventListener","handleAborted","delete","removeEventListener","reason","renderPromises","useOptions","obsQuery","useObservableQuery","useCallback","onNext","getCurrentResult","equal","setResult","subscription","onError","last","unsubscribe","resetLastResults","call","disableNetworkFetches","unsafeHandlePartialRefetch","queryResult","toQueryResult","size","forEach","clear","createWatchQueryOptions","queryHookOptions","currentWatchQueryOptions","has","observable","reobserve","getObsQueryOptions","onCompleted","ssr","skip","fetchPolicy","toMerge","globalDefaults","defaultOptions","watchQuery","compact","reduce","mergeOptions","otherOptions","__rest","_c","getDefaultFetchPolicy","_d","initialFetchPolicy","getSSRObservable","obsQueryFields","useMemo","refetch","bind","fetchMore","updateQuery","startPolling","stopPolling","subscribeToMore","ssrAllowed","registerSSRObservable","addObservableQueryPromise","nextResult","handleErrorOrCompleted","error_1","toApolloError","then","catch","isNonEmptyArray","errors","ApolloError","graphQLErrors","resultWithoutPartial","partial","__assign","called","partialRefetch","keys","Thumb","BtnWrapper","ToursHeading","ListWrapper","List","CardCarousel","_templateObject6","CardsCarousel","arrayLength","_useQuery","GET_ROCKETS","currentIdx","setCurrentIdx","_useState3","_useState4","rockets","setRockets","useEffect","map","rocket","idx","_objectSpread","uri","cardImages","alt","_Fragment","StyledIconButton","CARDS_SHOWN","HiddenTitle","message","transform","Card","id","slice"],"sourceRoot":""}